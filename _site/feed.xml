<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2018-10-05T00:00:05+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Jade Systems Inc.</title><subtitle>Jade Systems builds custom web applications for enterprises and start-ups.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://0.0.0.0:4000/tmp/jekyll/update/2018/10/04/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-10-04T21:51:03+00:00</published><updated>2018-10-04T21:51:03+00:00</updated><id>http://0.0.0.0:4000/tmp/jekyll/update/2018/10/04/welcome-to-jekyll</id><content type="html" xml:base="http://0.0.0.0:4000/tmp/jekyll/update/2018/10/04/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Changing Fonts on Linux Fillable PDF Forms</title><link href="http://0.0.0.0:4000/2018/01/26/changing-fonts-on-linux-fillable-pdf.html" rel="alternate" type="text/html" title="Changing Fonts on Linux Fillable PDF Forms" /><published>2018-01-26T19:50:00+00:00</published><updated>2018-01-26T19:50:00+00:00</updated><id>http://0.0.0.0:4000/2018/01/26/changing-fonts-on-linux-fillable-pdf</id><content type="html" xml:base="http://0.0.0.0:4000/2018/01/26/changing-fonts-on-linux-fillable-pdf.html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;title&gt;Changing Fonts on Linux Fillable PDF Forms&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackedit.io/res-min/themes/base.css&quot; /&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;&lt;/script&gt;&lt;style&gt;div.container {     max-width:100%;     margin: auto; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt;&lt;p&gt;I was trying to fill out the &lt;a href=&quot;https://www.canada.ca/content/dam/ircc/migration/ircc/english/passport/forms/pdf/pptc054.pdf&quot;&gt;Canadian passport renewal form&lt;/a&gt; on my Ubuntu 16.04 laptop. I was able to enter data into the fields just fine, but the font that was displayed after I left each field was almost unreadable.&lt;/p&gt; &lt;p&gt;I had seen this problem before with other fillable PDFs, like for example some from the Canadian Revenue Agency, so I decided it was time to figure out the problem.&lt;/p&gt; &lt;p&gt;I started by opening the form that was giving me grief, and clicked on File-&amp;gt; Properties, and then clicked on the Fonts tab. This gave me a list of fonts. Some of them were not the standard PDF fonts, as noted by the fact that it said “Not one of the standard 14 fonts.” just below the font name. &lt;/p&gt; &lt;p&gt;(Background: The PDF specification says there are 14 standard fonts that should display the same, as much as possible, in any viewer.)&lt;/p&gt; &lt;p&gt;I recognized two of the fonts as likely being &lt;a href=&quot;https://en.wikipedia.org/wiki/Monospaced_font&quot; title=&quot;monospaced&quot;&gt;monospaced&lt;/a&gt; fonts based on their names. Typically, forms designers use monospaced fonts for input because they can fit the text to pre-defined boxes on the form. I noticed that below the monospaced fonts, it said they were being substituted with “DejaVu Sans”, which didn’t sound like a monospaced font to me.&lt;/p&gt; &lt;p&gt;So I poked around on Google and found a few useful pages. From them, I figured out the following:&lt;/p&gt; &lt;p&gt;First, I put the following into &lt;code&gt;~/.config/fontconfig/conf.avail/69-courierstd-to-couriernew.conf&lt;/code&gt;:&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs xml&quot;&gt;&lt;span class=&quot;hljs-pi&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-doctype&quot;&gt;&amp;lt;!DOCTYPE fontconfig SYSTEM &quot;fonts.dtd&quot;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;fontconfig&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;pattern&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;family&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;CourierStd&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;edit&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;family&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;mode&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;prepend&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;Courier New&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;edit&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;match&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;fontconfig&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By putting it in that directory, I made it available but not enabled. To enable it, I made a symbolic link to it by doing:&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs avrasm&quot;&gt;ln -s ~/&lt;span class=&quot;hljs-preprocessor&quot;&gt;.config&lt;/span&gt;/fontconfig/conf&lt;span class=&quot;hljs-preprocessor&quot;&gt;.avail&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;69&lt;/span&gt;-courierstd-to-couriernew&lt;span class=&quot;hljs-preprocessor&quot;&gt;.conf&lt;/span&gt; ~/&lt;span class=&quot;hljs-preprocessor&quot;&gt;.config&lt;/span&gt;/fontconfig/conf&lt;span class=&quot;hljs-preprocessor&quot;&gt;.d&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;CourierStd was one of the fonts that was in the PDF form, and was being substituted with DejaVu Sans. I knew that Courier New was a font on my system because it shows up in Libre Office Writer and other programs that deal with fonts. So the contents of the file tell Linux to use Courier New when a document asks for CourierStd.&lt;/p&gt; &lt;p&gt;The way the fonts work on Ubuntu, it may take up to 30 seconds for the system to recognize the new substitution. After waiting for 30 seconds, I opened the passport renewal form again and voilà, I had Courier New on the fields I filled in.&lt;/p&gt; &lt;p&gt;The above works for the logged in user. If I had more than one user ID on my system, I might have put the same file in &lt;code&gt;/etc/fonts/conf.avail&lt;/code&gt;, and linked to it from &lt;code&gt;/etc/fonts/conf.d&lt;/code&gt;. That would make the substitution work for all users on the system.&lt;/p&gt; &lt;p&gt;From what I understand, other Linux distributions may store their fonts in different places. You can try to figure out where to put the file by reading &lt;code&gt;/etc/fonts/fonts.conf&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;a href=&quot;https://wiki.ubuntu.com/Fonts&quot;&gt;Ubuntu wiki page on fonts&lt;/a&gt; is a good place to start if you want to learn more about fonts on Ubuntu.&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Larry Reid</name></author><summary type="html">Changing Fonts on Linux Fillable PDF FormsI was trying to fill out the Canadian passport renewal form on my Ubuntu 16.04 laptop. I was able to enter data into the fields just fine, but the font that was displayed after I left each field was almost unreadable. I had seen this problem before with other fillable PDFs, like for example some from the Canadian Revenue Agency, so I decided it was time to figure out the problem. I started by opening the form that was giving me grief, and clicked on File-&amp;gt; Properties, and then clicked on the Fonts tab. This gave me a list of fonts. Some of them were not the standard PDF fonts, as noted by the fact that it said “Not one of the standard 14 fonts.” just below the font name. (Background: The PDF specification says there are 14 standard fonts that should display the same, as much as possible, in any viewer.) I recognized two of the fonts as likely being monospaced fonts based on their names. Typically, forms designers use monospaced fonts for input because they can fit the text to pre-defined boxes on the form. I noticed that below the monospaced fonts, it said they were being substituted with “DejaVu Sans”, which didn’t sound like a monospaced font to me. So I poked around on Google and found a few useful pages. From them, I figured out the following: First, I put the following into ~/.config/fontconfig/conf.avail/69-courierstd-to-couriernew.conf: &amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&amp;lt;!DOCTYPE fontconfig SYSTEM &quot;fonts.dtd&quot;&amp;gt;&amp;lt;fontconfig&amp;gt; &amp;lt;match target=&quot;pattern&quot;&amp;gt; &amp;lt;test name=&quot;family&quot;&amp;gt; &amp;lt;string&amp;gt;CourierStd&amp;lt;/string&amp;gt; &amp;lt;/test&amp;gt; &amp;lt;edit name=&quot;family&quot; mode=&quot;prepend&quot;&amp;gt; &amp;lt;string&amp;gt;Courier New&amp;lt;/string&amp;gt; &amp;lt;/edit&amp;gt; &amp;lt;/match&amp;gt;&amp;lt;/fontconfig&amp;gt; By putting it in that directory, I made it available but not enabled. To enable it, I made a symbolic link to it by doing: ln -s ~/.config/fontconfig/conf.avail/69-courierstd-to-couriernew.conf ~/.config/fontconfig/conf.d CourierStd was one of the fonts that was in the PDF form, and was being substituted with DejaVu Sans. I knew that Courier New was a font on my system because it shows up in Libre Office Writer and other programs that deal with fonts. So the contents of the file tell Linux to use Courier New when a document asks for CourierStd. The way the fonts work on Ubuntu, it may take up to 30 seconds for the system to recognize the new substitution. After waiting for 30 seconds, I opened the passport renewal form again and voilà, I had Courier New on the fields I filled in. The above works for the logged in user. If I had more than one user ID on my system, I might have put the same file in /etc/fonts/conf.avail, and linked to it from /etc/fonts/conf.d. That would make the substitution work for all users on the system. From what I understand, other Linux distributions may store their fonts in different places. You can try to figure out where to put the file by reading /etc/fonts/fonts.conf. The Ubuntu wiki page on fonts is a good place to start if you want to learn more about fonts on Ubuntu.</summary></entry><entry><title type="html">Switching to Headless Chrome for Rails System Tests</title><link href="http://0.0.0.0:4000/2017/11/01/switching-to-headless-chrome-for-rails_31.html" rel="alternate" type="text/html" title="Switching to Headless Chrome for Rails System Tests" /><published>2017-11-01T02:10:00+00:00</published><updated>2017-11-01T02:10:00+00:00</updated><id>http://0.0.0.0:4000/2017/11/01/switching-to-headless-chrome-for-rails_31</id><content type="html" xml:base="http://0.0.0.0:4000/2017/11/01/switching-to-headless-chrome-for-rails_31.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt; &lt;p&gt;I recently switched a Rails 5.1 application’s system tests from &lt;a href=&quot;https://github.com/teamcapybara/capybara&quot;&gt;Capybara&lt;/a&gt;, &lt;a href=&quot;https://github.com/teampoltergeist/poltergeist&quot;&gt;Poltergeist&lt;/a&gt;, and &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;, to Capybara, Selenium, and headless Chrome. We run the development and test environments of the application on a Vagrant box running Ubuntu 16.04 server.&lt;/p&gt; &lt;p&gt;With the release of headless Chrome, &lt;a href=&quot;https://github.com/ariya/phantomjs/issues/15105&quot;&gt;PhantomJS is no longer being developed or maintained&lt;/a&gt;. It also used a different browser engine that the major browsers, and I was noticing that some test cases didn’t run exactly like they would in a real browser. So when I saw that there was a &lt;a href=&quot;https://github.com/rails/rails/pull/30930&quot;&gt;pull request&lt;/a&gt; in to Rails to change to Selenium and headless Chrome, I thought it was time to try it myself.&lt;/p&gt;   &lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt; &lt;p&gt;The first thing I did was to install Google Chrome from a Google repository, so it’s easy to get updates: &lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs lasso&quot;&gt;wget &lt;span class=&quot;hljs-attribute&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;-O&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;-&lt;/span&gt; https:&lt;span class=&quot;hljs-comment&quot;&gt;//dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add&lt;/span&gt;&lt;br /&gt;echo &lt;span class=&quot;hljs-string&quot;&gt;'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main'&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;|&lt;/span&gt; sudo tee /etc/apt/sources&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;d/google&lt;span class=&quot;hljs-attribute&quot;&gt;-chrome&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;br /&gt;sudo apt&lt;span class=&quot;hljs-attribute&quot;&gt;-get&lt;/span&gt; update&lt;br /&gt;sudo apt&lt;span class=&quot;hljs-attribute&quot;&gt;-get&lt;/span&gt; install google&lt;span class=&quot;hljs-attribute&quot;&gt;-chrome&lt;/span&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;-stable&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;   &lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt; &lt;p&gt;(Note that this configuration will change if/when &lt;a href=&quot;https://github.com/rails/rails/pull/30930&quot;&gt;Rails comes with configuration for headless Chrome&lt;/a&gt;.)&lt;/p&gt; &lt;p&gt;I set up the configuration in &lt;code&gt;test/application_system_test_case.rb&lt;/code&gt;. The Rails 5.1 &lt;code&gt;driven_by&lt;/code&gt; allows some options to be set, but I couldn’t figure out how to set the options I needed, so I registered a separate driver for headless Chrome:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs avrasm&quot;&gt;  Capybara&lt;span class=&quot;hljs-preprocessor&quot;&gt;.register&lt;/span&gt;_driver(:headless_chrome) do |app|&lt;br /&gt;    capabilities = Selenium::WebDriver::Remote::Capabilities&lt;span class=&quot;hljs-preprocessor&quot;&gt;.chrome&lt;/span&gt;(&lt;br /&gt;      &lt;span class=&quot;hljs-preprocessor&quot;&gt;# This makes logs available, but doesn't cause them to appear&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;hljs-preprocessor&quot;&gt;# in real time on the console&lt;/span&gt;&lt;br /&gt;      loggingPrefs: {&lt;br /&gt;        browser: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ALL&quot;&lt;/span&gt;,&lt;br /&gt;        client: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ALL&quot;&lt;/span&gt;,&lt;br /&gt;        driver: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ALL&quot;&lt;/span&gt;,&lt;br /&gt;        server: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ALL&quot;&lt;/span&gt;&lt;br /&gt;      }&lt;br /&gt;    )&lt;br /&gt;&lt;br /&gt;    options = Selenium::WebDriver::Chrome::Options&lt;span class=&quot;hljs-preprocessor&quot;&gt;.new&lt;/span&gt;&lt;br /&gt;    options&lt;span class=&quot;hljs-preprocessor&quot;&gt;.add&lt;/span&gt;_argument(&lt;span class=&quot;hljs-string&quot;&gt;&quot;window-size=1400,1200&quot;&lt;/span&gt;)&lt;br /&gt;    options&lt;span class=&quot;hljs-preprocessor&quot;&gt;.add&lt;/span&gt;_argument(&lt;span class=&quot;hljs-string&quot;&gt;&quot;headless&quot;&lt;/span&gt;)&lt;br /&gt;    options&lt;span class=&quot;hljs-preprocessor&quot;&gt;.add&lt;/span&gt;_argument(&lt;span class=&quot;hljs-string&quot;&gt;&quot;disable-gpu&quot;&lt;/span&gt;)&lt;br /&gt;&lt;br /&gt;    Capybara::Selenium::Driver&lt;span class=&quot;hljs-preprocessor&quot;&gt;.new&lt;/span&gt;(&lt;br /&gt;      app,&lt;br /&gt;      browser: :chrome,&lt;br /&gt;      desired_capabilities: capabilities,&lt;br /&gt;      options: options&lt;br /&gt;    )&lt;br /&gt;  end&lt;br /&gt;&lt;br /&gt;  driven_by :headless_chrome&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The arguments for &lt;code&gt;&quot;headless&quot;&lt;/code&gt; and &lt;code&gt;&quot;disable-gpu&quot;&lt;/code&gt; were necessary to make testing with headless Chrome work. I had to set the window size, because the default window size caused my application’s menu to collapse to a mobile device menu (I’m using Bootstrap 4).&lt;/p&gt;   &lt;h2 id=&quot;upgrade-capybara&quot;&gt;Upgrade Capybara&lt;/h2&gt; &lt;p&gt;My  &lt;code&gt;Gemfile&lt;/code&gt; had the version of Capybara locked down. I found that a lot of problems went away simply by taking away the version constraint in the &lt;code&gt;Gemfile&lt;/code&gt; and letting &lt;code&gt;bundle upgrade capybara --conservative&lt;/code&gt; do its thing.&lt;/p&gt;   &lt;h2 id=&quot;fillin-doesnt-fire-change-event&quot;&gt;&lt;code&gt;fill_in&lt;/code&gt; Doesn’t Fire Change Event&lt;/h2&gt; &lt;p&gt;I had some JavaScript that ran when input fields changed, via the &lt;code&gt;changed&lt;/code&gt; event. I had to add a newline to the end of the input text for force the change event to fire:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs bash&quot;&gt;fill_&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Fragment&quot;&lt;/span&gt;, with: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Outage B\n&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;   &lt;h2 id=&quot;fillin-date-time-field-with-doesnt-work&quot;&gt;&lt;code&gt;fill_in&lt;/code&gt; Date Time Field With “” Doesn’t Work&lt;/h2&gt; &lt;p&gt;Filling in a date time field with “” to clear it worked with Poltergeist/PhantomJS. With Selenium and headless Chrome it gives:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs lasso&quot;&gt;Selenium&lt;span class=&quot;hljs-tag&quot;&gt;::WebDriver&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;::Error&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;::InvalidElementStateError&lt;/span&gt;: invalid element state: Element must be user&lt;span class=&quot;hljs-attribute&quot;&gt;-editable&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; clear it&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So I changed the places where I had to clear a date or date time field to this instead:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs ruby&quot;&gt;find_field(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Outages Before&quot;&lt;/span&gt;).send_keys &lt;span class=&quot;hljs-symbol&quot;&gt;:delete&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;   &lt;h2 id=&quot;fillin-date-field-with-date-works-differently&quot;&gt;&lt;code&gt;fill_in&lt;/code&gt; Date Field With Date Works Differently&lt;/h2&gt; &lt;p&gt;Selenium and headless Chrome seem to process &lt;code&gt;fill_in&lt;/code&gt; of a date field more like what the user would experience. My tests that worked with Poltergeist and PhantomJS didn’t work with headless Chrome and Selenium, although part of the problem may have been with the &lt;code&gt;change&lt;/code&gt; event triggers I had on the date fields.&lt;/p&gt; &lt;p&gt;I got the tests to work by (mysteriously) entering the date as “12312017”, in other words, in the date order used by only one country in the whole known universe. I still had to assert against dates in the format “yyyy-mm-dd”. &lt;/p&gt; &lt;p&gt;I also discovered that PhantomJS and/or Poltergeist was more forgiving about date formats in asserts, so I had to change a bunch of asserts where I had used the “dd/mm/yyyy” format.&lt;/p&gt;   &lt;h2 id=&quot;alerts&quot;&gt;Alerts&lt;/h2&gt; &lt;p&gt;Alerts aren’t automatically dismissed, so I had to go through all my tests and put an &lt;code&gt;assert_accept&lt;/code&gt; block around actions like deletes, like this:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs livecodeserver&quot;&gt;accept_alert &lt;span class=&quot;hljs-built_in&quot;&gt;do&lt;/span&gt;&lt;br /&gt;  click_link &lt;span class=&quot;hljs-string&quot;&gt;&quot;Delete&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;   &lt;h2 id=&quot;empty-divs&quot;&gt;Empty &lt;code&gt;div&lt;/code&gt;s&lt;/h2&gt; &lt;p&gt;Selenium and Chrome seem to treat an empty &lt;code&gt;div&lt;/code&gt; as if it’s not visible. I had to change some selectors that were looking for an empty &lt;code&gt;div&lt;/code&gt; to something like this:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs ruby&quot;&gt;assert_selector &lt;span class=&quot;hljs-string&quot;&gt;&quot;.test-home-page&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-symbol&quot;&gt;visible:&lt;/span&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;:any&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;   &lt;h2 id=&quot;no-browser-logs-in-real-time-or-by-default&quot;&gt;No Browser Logs in Real Time (or by Default)&lt;/h2&gt; &lt;p&gt;Browser logs don’t appear by default, and don’t appear in real time. To show what was in the browser log, I had to put the following in the test script:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs avrasm&quot;&gt;puts page&lt;span class=&quot;hljs-preprocessor&quot;&gt;.driver&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.manage&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.get&lt;/span&gt;_log(:browser)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To even have the browser log available at all, I had to set up the configuration as described at the beginning of this post.&lt;/p&gt;   &lt;h2 id=&quot;performance&quot;&gt;Performance&lt;/h2&gt; &lt;p&gt;My system tests take about 50 % longer with headless Chrome, compared to PhantomJS. &lt;/p&gt;</content><author><name>Larry Reid</name></author><summary type="html">Introduction I recently switched a Rails 5.1 application’s system tests from Capybara, Poltergeist, and PhantomJS, to Capybara, Selenium, and headless Chrome. We run the development and test environments of the application on a Vagrant box running Ubuntu 16.04 server. With the release of headless Chrome, PhantomJS is no longer being developed or maintained. It also used a different browser engine that the major browsers, and I was noticing that some test cases didn’t run exactly like they would in a real browser. So when I saw that there was a pull request in to Rails to change to Selenium and headless Chrome, I thought it was time to try it myself. Installation The first thing I did was to install Google Chrome from a Google repository, so it’s easy to get updates: wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key addecho 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.listsudo apt-get updatesudo apt-get install google-chrome-stable Configuration (Note that this configuration will change if/when Rails comes with configuration for headless Chrome.) I set up the configuration in test/application_system_test_case.rb. The Rails 5.1 driven_by allows some options to be set, but I couldn’t figure out how to set the options I needed, so I registered a separate driver for headless Chrome: Capybara.register_driver(:headless_chrome) do |app| capabilities = Selenium::WebDriver::Remote::Capabilities.chrome( # This makes logs available, but doesn't cause them to appear # in real time on the console loggingPrefs: { browser: &quot;ALL&quot;, client: &quot;ALL&quot;, driver: &quot;ALL&quot;, server: &quot;ALL&quot; } ) options = Selenium::WebDriver::Chrome::Options.new options.add_argument(&quot;window-size=1400,1200&quot;) options.add_argument(&quot;headless&quot;) options.add_argument(&quot;disable-gpu&quot;) Capybara::Selenium::Driver.new( app, browser: :chrome, desired_capabilities: capabilities, options: options ) end driven_by :headless_chrome The arguments for &quot;headless&quot; and &quot;disable-gpu&quot; were necessary to make testing with headless Chrome work. I had to set the window size, because the default window size caused my application’s menu to collapse to a mobile device menu (I’m using Bootstrap 4). Upgrade Capybara My Gemfile had the version of Capybara locked down. I found that a lot of problems went away simply by taking away the version constraint in the Gemfile and letting bundle upgrade capybara --conservative do its thing. fill_in Doesn’t Fire Change Event I had some JavaScript that ran when input fields changed, via the changed event. I had to add a newline to the end of the input text for force the change event to fire: fill_in &quot;Fragment&quot;, with: &quot;Outage B\n&quot; fill_in Date Time Field With “” Doesn’t Work Filling in a date time field with “” to clear it worked with Poltergeist/PhantomJS. With Selenium and headless Chrome it gives: Selenium::WebDriver::Error::InvalidElementStateError: invalid element state: Element must be user-editable in order to clear it. So I changed the places where I had to clear a date or date time field to this instead: find_field(&quot;Outages Before&quot;).send_keys :delete fill_in Date Field With Date Works Differently Selenium and headless Chrome seem to process fill_in of a date field more like what the user would experience. My tests that worked with Poltergeist and PhantomJS didn’t work with headless Chrome and Selenium, although part of the problem may have been with the change event triggers I had on the date fields. I got the tests to work by (mysteriously) entering the date as “12312017”, in other words, in the date order used by only one country in the whole known universe. I still had to assert against dates in the format “yyyy-mm-dd”. I also discovered that PhantomJS and/or Poltergeist was more forgiving about date formats in asserts, so I had to change a bunch of asserts where I had used the “dd/mm/yyyy” format. Alerts Alerts aren’t automatically dismissed, so I had to go through all my tests and put an assert_accept block around actions like deletes, like this: accept_alert do click_link &quot;Delete&quot;end Empty divs Selenium and Chrome seem to treat an empty div as if it’s not visible. I had to change some selectors that were looking for an empty div to something like this: assert_selector &quot;.test-home-page&quot;, visible: :any No Browser Logs in Real Time (or by Default) Browser logs don’t appear by default, and don’t appear in real time. To show what was in the browser log, I had to put the following in the test script: puts page.driver.manage.get_log(:browser) To even have the browser log available at all, I had to set up the configuration as described at the beginning of this post. Performance My system tests take about 50 % longer with headless Chrome, compared to PhantomJS.</summary></entry><entry><title type="html">Tips for System Testing With Capybara</title><link href="http://0.0.0.0:4000/2017/10/14/tips-for-system-testing-with-capybara_37.html" rel="alternate" type="text/html" title="Tips for System Testing With Capybara" /><published>2017-10-14T18:35:00+00:00</published><updated>2017-10-14T18:35:00+00:00</updated><id>http://0.0.0.0:4000/2017/10/14/tips-for-system-testing-with-capybara_37</id><content type="html" xml:base="http://0.0.0.0:4000/2017/10/14/tips-for-system-testing-with-capybara_37.html">&lt;p&gt;One of the great challenges of system testing applications is the fact that there are two (or more) independent processes: One to run the test script. The other to run the browser. The actions in the test script and the actions as performed by the browser and the back end, are not necessarily synchronized the way they are in unit or controller tests. &lt;/p&gt; &lt;p&gt;This can lead to tests the fail sometimes but not others. They may fail one in ten runs, or they may work on development machines, but fail on the continuous integration platform, or vice versa. &lt;a href=&quot;https://martinfowler.com/articles/nonDeterminism.html&quot;&gt;Some say&lt;/a&gt; that unreliable tests are one of the key things that lead people away from automated testing.&lt;/p&gt; &lt;p&gt;I’ve struggled with unreliable tests on Rails applications using &lt;a href=&quot;http://teamcapybara.github.io/capybara/&quot;&gt;Capybara&lt;/a&gt;. Here are some of the solutions I’ve used successfully to make tests more reliable.&lt;/p&gt; &lt;h2 id=&quot;spinner&quot;&gt;Spinner&lt;/h2&gt; &lt;p&gt;I like this one because it’s what I should be doing for my users anyway. Anytime something is happening in the background that might take some time, the page should put up a spinner – something that shows that the user should wait. &lt;/p&gt; &lt;p&gt;There are lots of spinners available on-line. Some examples are:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://projects.lukehaas.me/css-loaders/&quot;&gt;https://projects.lukehaas.me/css-loaders/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://cssload.net/en/spinners&quot;&gt;http://cssload.net/en/spinners&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.pexels.com/blog/css-only-loaders/&quot;&gt;https://www.pexels.com/blog/css-only-loaders/&lt;/a&gt; (the example below is based on the snake spinner from this link)&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;The spinner chosen is not important from the point of view of the test. The tests work on the presence or absence of the spinner element. The basic idea is this:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;The Capybara test script initiates a JavaScript action that will take some time&lt;/li&gt;&lt;li&gt;The test browser begins running the JavaScript. The first thing the JavaScript does is put up the spinner by un-hiding the spinner element or adding the spinner element to the DOM. The spinner element should have a distinctive id or class&lt;/li&gt;&lt;li&gt;&lt;p&gt;The Capybara script waits for the spinner to go away by doing something like:&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs bash&quot;&gt;assert_no_selector &lt;span class=&quot;hljs-string&quot;&gt;&quot;.spinner&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;On completing the AJAX request, the JavaScript hides the spinner element or removes it from the DOM&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;Here is one example of this technique from a Rails 5.1 application with Turbolinks. All it needs is this JavaScript in the application:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-JavaScript hljs javascript&quot;&gt;$(document).on(&lt;span class=&quot;hljs-string&quot;&gt;'turbolinks:load'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;  $(&lt;span class=&quot;hljs-string&quot;&gt;'form.js-submit-on-change'&lt;/span&gt;).change(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(event)&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;body&quot;&lt;/span&gt;).prepend(&lt;span class=&quot;hljs-string&quot;&gt;'&amp;lt;div class=&quot;spinner&quot;&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt;);&lt;br /&gt;    $(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;).submit();&lt;br /&gt;  }).on(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ajax:success&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;  }).on(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ajax:error&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;  }).on(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ajax:complete&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.spinner&quot;&lt;/span&gt;).remove();&lt;br /&gt;  });&lt;br /&gt;});&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then this in the test case to ensure that the test is synchronized with the browser:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-Ruby hljs bash&quot;&gt;assert_no_selector &lt;span class=&quot;hljs-string&quot;&gt;&quot;.spinner&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(This JavaScript works for the case where I had forms that I wanted to automatically submit on any change to any of their fields. A traditional form that has a submit button would want to catch the submit event for the form.)&lt;/p&gt; &lt;p&gt;For completeness, here’s some SASS to put in &lt;code&gt;assets/stylesheets/spinner.scss&lt;/code&gt; to actually show a spinner:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-CSS hljs scss&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;.spinner&lt;/span&gt; {&lt;br /&gt;  &lt;span class=&quot;hljs-at_rule&quot;&gt;@&lt;span class=&quot;hljs-keyword&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt; .centered-in-window&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;px;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;px;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: rotate &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;s infinite linear;&lt;/span&gt;&lt;br /&gt;  -webkit-&lt;span class=&quot;hljs-attribute&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: rotate &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;s infinite linear;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;px solid &lt;span class=&quot;hljs-hexcolor&quot;&gt;#fff&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;border-right-color&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: black;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;%;&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-at_rule&quot;&gt;@keyframes&lt;span class=&quot;hljs-preprocessor&quot;&gt; rotate&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;  0% {&lt;br /&gt;    &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: rotate(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;deg);&lt;/span&gt;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  100% {&lt;br /&gt;    &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: rotate(&lt;span class=&quot;hljs-number&quot;&gt;360&lt;/span&gt;deg);&lt;/span&gt;&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-at_rule&quot;&gt;@-webkit-keyframes&lt;span class=&quot;hljs-preprocessor&quot;&gt; rotate&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;  0% {&lt;br /&gt;    -webkit-&lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: rotate(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;deg);&lt;/span&gt;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  100% {&lt;br /&gt;    -webkit-&lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: rotate(&lt;span class=&quot;hljs-number&quot;&gt;360&lt;/span&gt;deg);&lt;/span&gt;&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-class&quot;&gt;.centered-in-window&lt;/span&gt; {&lt;br /&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: fixed;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;%;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;%;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;/* bring your own prefixes */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;hljs-value&quot;&gt;: translate(-&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;%, -&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;%);&lt;/span&gt;&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Don’t forget to add &lt;code&gt;@import &quot;spinner&quot;;&lt;/code&gt; to your &lt;code&gt;assets/stylesheets/application.scss&lt;/code&gt; file.&lt;/p&gt;   &lt;h2 id=&quot;only-the-back-end-changes&quot;&gt;Only the Back End Changes&lt;/h2&gt; &lt;p&gt;When the user changes, say, a check box or a drop down menu (a select tag), nothing happens on the browser side other than the change the user made. But often, on the back end something is added, changed, or removed from the database. I tried to use Rails’ &lt;code&gt;assert_difference&lt;/code&gt; to test that the right thing happened, but more often than not it would fail, because by the time the database was updated, Capybara had already finished executing the &lt;code&gt;assert_difference&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Because of that, my tests were full of examples like this:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-Ruby hljs livecodeserver&quot;&gt;assert_difference &lt;span class=&quot;hljs-string&quot;&gt;&quot;CisOutage.count&quot;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;do&lt;/span&gt;&lt;br /&gt;  click_on &lt;span class=&quot;hljs-string&quot;&gt;&quot;Save&quot;&lt;/span&gt;&lt;br /&gt;  sleep &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Each time I put in a &lt;code&gt;sleep 2&lt;/code&gt; in my test cases, I was making the test take almost two seconds longer than it needed to. If I didn’t have the &lt;code&gt;sleep 2&lt;/code&gt; in the test, the test would fail, because the &lt;code&gt;CisOutage&lt;/code&gt; record wouldn’t have been saved in the database by the time the test case evaluated the &lt;code&gt;CisOutage.count&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To fix this, I wrote my own &lt;code&gt;assert_difference&lt;/code&gt; for system tests, shamelessly stealing from the Rails source and a few items from Capybara. Like the Rails &lt;code&gt;assert_difference&lt;/code&gt;, it runs the expressions to get the “before” value, executes the block, then runs the expressions again to get the after values. Unlike the Rails version, if any of the expressions fail to produce the desired result, it sleeps for a tenth of a second, then retries the expressions, until all the expressions produce the desired result, or two seconds pass:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-Ruby hljs livecodeserver&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;##&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Check for a difference in `expression`, but repeat the check until it's&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# true, or two seconds pass. Taken from Rails source and leveraging&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# some Capybara stuff.&lt;/span&gt;&lt;br /&gt;def assert_difference(expression, difference = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, message = nil, &amp;amp;block)&lt;br /&gt;  expressions = Array(expression)&lt;br /&gt;&lt;br /&gt;  exps = expressions.map &lt;span class=&quot;hljs-built_in&quot;&gt;do&lt;/span&gt; |e|&lt;br /&gt;    e.respond_to?(:call) ? e : -&amp;gt; { eval(e, block.binding) }&lt;br /&gt;  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;before&lt;/span&gt; = exps.map(&amp;amp;:call)&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;after&lt;/span&gt; = []&lt;br /&gt;&lt;br /&gt;  retval = yield&lt;br /&gt;&lt;br /&gt;  start_time = Capybara::Helpers.monotonic_time&lt;br /&gt;  loop &lt;span class=&quot;hljs-built_in&quot;&gt;do&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;after&lt;/span&gt; = exps.map(&amp;amp;:call)&lt;br /&gt;    break &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;before&lt;/span&gt;.zip(&lt;span class=&quot;hljs-keyword&quot;&gt;after&lt;/span&gt;).all? { |(b, &lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt;)| &lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; == b + difference } ||&lt;br /&gt;             start_time + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &amp;lt; Capybara::Helpers.monotonic_time&lt;br /&gt;    sleep &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  expressions.zip(&lt;span class=&quot;hljs-keyword&quot;&gt;after&lt;/span&gt;).each_with_index &lt;span class=&quot;hljs-built_in&quot;&gt;do&lt;/span&gt; |(code, &lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt;), i|&lt;br /&gt;    error  = &lt;span class=&quot;hljs-string&quot;&gt;&quot;#{code.inspect} didn't change by #{difference}&quot;&lt;/span&gt;&lt;br /&gt;    error  = &lt;span class=&quot;hljs-string&quot;&gt;&quot;#{message}.\n#{error}&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; message&lt;br /&gt;    assert_equal(&lt;span class=&quot;hljs-keyword&quot;&gt;before&lt;/span&gt;[i] + difference, &lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt;, error)&lt;br /&gt;  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  retval&lt;br /&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For Rails 5.1, I put this in the &lt;code&gt;ApplicationSystemTestCase&lt;/code&gt; class in &lt;code&gt;app/test/application_system_test_case.rb&lt;/code&gt;. For Rails 5.0 and 4.x, I would have to put it somewhere else. &lt;/p&gt; &lt;p&gt;This code could be improved in many ways, but it was good enough to allow me to remove 40 seconds worth of arbitrary &lt;code&gt;sleep&lt;/code&gt; statements in my system test cases.&lt;/p&gt; &lt;p&gt;Now my test case looks like this:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-Ruby hljs livecodeserver&quot;&gt;assert_difference &lt;span class=&quot;hljs-string&quot;&gt;&quot;CisOutage.count&quot;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;do&lt;/span&gt;&lt;br /&gt;  click_on &lt;span class=&quot;hljs-string&quot;&gt;&quot;Save&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And the test typically waits at most a couple of tenths of a second before succeeding.&lt;/p&gt;   &lt;h2 id=&quot;only-the-order-changes&quot;&gt;Only the Order Changes&lt;/h2&gt; &lt;p&gt;To test “latest first/earliest first” buttons, and similar actions, I had to go beyond a simple &lt;code&gt;assert_text&lt;/code&gt; on the page. At first I tried getting all the list items within the list I was interested in, like this:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-Ruby hljs livecodeserver&quot;&gt;click_link &lt;span class=&quot;hljs-string&quot;&gt;&quot;Oldest First&quot;&lt;/span&gt;&lt;br /&gt;notes = all(&lt;span class=&quot;hljs-string&quot;&gt;&quot;li.note&quot;&lt;/span&gt;)&lt;br /&gt;&lt;span class=&quot;hljs-operator&quot;&gt;within&lt;/span&gt;(notes[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) &lt;span class=&quot;hljs-built_in&quot;&gt;do&lt;/span&gt;&lt;br /&gt;  assert_text &lt;span class=&quot;hljs-string&quot;&gt;&quot;Note B&quot;&lt;/span&gt;&lt;br /&gt;  assert_text &lt;span class=&quot;hljs-string&quot;&gt;&quot;1 day ago&quot;&lt;/span&gt;&lt;br /&gt;  assert_no_link &lt;span class=&quot;hljs-string&quot;&gt;&quot;Edit&quot;&lt;/span&gt;&lt;br /&gt;  assert_text &lt;span class=&quot;hljs-string&quot;&gt;&quot;Can Edit CIs/Outages&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This would fail if Capybara happened to grab the list &lt;em&gt;before&lt;/em&gt; the back end had replied to the browser. More often than not, I found Capybara would populate the &lt;code&gt;notes&lt;/code&gt; variable with nodes from the page &lt;em&gt;before&lt;/em&gt; the back end responded with the re-ordered list. In the best case, I would simply get test failures. In other cases, Capybara would actually throw errors (the dreaded “stale node” error). This is because once the browser gets the response from the back end, the nodes in &lt;code&gt;notes&lt;/code&gt; will no longer be on the current page of the browser.&lt;/p&gt; &lt;p&gt;My fix was to use a more specific selector to take advantage of &lt;a href=&quot;http://www.rubydoc.info/github/teamcapybara/capybara#asynchronous-javascript-ajax-and-friends&quot;&gt;Capybara’s waiting behaviour&lt;/a&gt;. This method works for one specific case I had:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-Ruby hljs livecodeserver&quot;&gt;  def assert_synchronized(&lt;span class=&quot;hljs-keyword&quot;&gt;text&lt;/span&gt;, ordinal = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br /&gt;    assert_selector &lt;span class=&quot;hljs-string&quot;&gt;&quot;li.note:nth-of-type(#{ordinal + 1}) .note-body&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;text&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This finds the &lt;code&gt;(ordinal + 1)&lt;/code&gt;th list item, and then if it has class &lt;code&gt;note&lt;/code&gt;, finds all nodes with class &lt;code&gt;note-body&lt;/code&gt; with the &lt;code&gt;li&lt;/code&gt;, and checks to see if they have the desired text. &lt;/p&gt; &lt;p&gt;When I put this &lt;code&gt;assert_synchronized&lt;/code&gt; call somewhere in the test case, Capybara checks that the first item in the list has the text I expect, and will do its standard waiting behaviour before proceeding with the rest of the test. &lt;/p&gt; &lt;p&gt;I was using 0-based indexes in the rest of the code, but CSS selectors are 1-based, which is why the &lt;code&gt;ordinal + 1&lt;/code&gt;. Also, in a more general case I’d have to make sure I was in the right list, but on this page there was only one list. The actual selector would be different for every page or case. The above is just one example.&lt;/p&gt; &lt;p&gt;Here’s how I fixed the above test case:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-Ruby hljs livecodeserver&quot;&gt;click_link &lt;span class=&quot;hljs-string&quot;&gt;&quot;Oldest First&quot;&lt;/span&gt;&lt;br /&gt;assert_synchronized(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Note B&quot;&lt;/span&gt;)&lt;br /&gt;notes = all(&lt;span class=&quot;hljs-string&quot;&gt;&quot;li.note&quot;&lt;/span&gt;)&lt;br /&gt;&lt;span class=&quot;hljs-operator&quot;&gt;within&lt;/span&gt;(notes[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) &lt;span class=&quot;hljs-built_in&quot;&gt;do&lt;/span&gt;&lt;br /&gt;  assert_text &lt;span class=&quot;hljs-string&quot;&gt;&quot;Note B&quot;&lt;/span&gt;&lt;br /&gt;  assert_text &lt;span class=&quot;hljs-string&quot;&gt;&quot;1 day ago&quot;&lt;/span&gt;&lt;br /&gt;  assert_no_link &lt;span class=&quot;hljs-string&quot;&gt;&quot;Edit&quot;&lt;/span&gt;&lt;br /&gt;  assert_text &lt;span class=&quot;hljs-string&quot;&gt;&quot;Can Edit CIs/Outages&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I ran into a couple of challenges with this approach:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;The &lt;code&gt;nth-of-type(x)&lt;/code&gt; selector is literally on the type, AKA HTML tag, and not the other selectors. In other words, something like &lt;code&gt;li.note:nth-of-type(1)&lt;/code&gt; gets the first &lt;code&gt;li&lt;/code&gt; regardless of its classes, then checks to see if the &lt;code&gt;li&lt;/code&gt; has class &lt;code&gt;note&lt;/code&gt;. So if the list is mixed and the first &lt;code&gt;li&lt;/code&gt; does not have class &lt;code&gt;note&lt;/code&gt;, the selector returns nothing&lt;/li&gt;&lt;li&gt;I had a mixed list as described above, where not every &lt;code&gt;li&lt;/code&gt; had the same class. To work around the problem, I was looking at the second item in the list. But the list only had three items in it, so looking at the second item wasn’t synchronizing Capybara with the back end. It took me a while before the light bulb when on and I realized why my test was getting out of sync&lt;/li&gt;&lt;/ul&gt;</content><author><name>Larry Reid</name></author><summary type="html">One of the great challenges of system testing applications is the fact that there are two (or more) independent processes: One to run the test script. The other to run the browser. The actions in the test script and the actions as performed by the browser and the back end, are not necessarily synchronized the way they are in unit or controller tests. This can lead to tests the fail sometimes but not others. They may fail one in ten runs, or they may work on development machines, but fail on the continuous integration platform, or vice versa. Some say that unreliable tests are one of the key things that lead people away from automated testing. I’ve struggled with unreliable tests on Rails applications using Capybara. Here are some of the solutions I’ve used successfully to make tests more reliable. Spinner I like this one because it’s what I should be doing for my users anyway. Anytime something is happening in the background that might take some time, the page should put up a spinner – something that shows that the user should wait. There are lots of spinners available on-line. Some examples are: https://projects.lukehaas.me/css-loaders/http://cssload.net/en/spinnershttps://www.pexels.com/blog/css-only-loaders/ (the example below is based on the snake spinner from this link) The spinner chosen is not important from the point of view of the test. The tests work on the presence or absence of the spinner element. The basic idea is this: The Capybara test script initiates a JavaScript action that will take some timeThe test browser begins running the JavaScript. The first thing the JavaScript does is put up the spinner by un-hiding the spinner element or adding the spinner element to the DOM. The spinner element should have a distinctive id or classThe Capybara script waits for the spinner to go away by doing something like: assert_no_selector &quot;.spinner&quot;On completing the AJAX request, the JavaScript hides the spinner element or removes it from the DOM Here is one example of this technique from a Rails 5.1 application with Turbolinks. All it needs is this JavaScript in the application: $(document).on('turbolinks:load', function(e) { $('form.js-submit-on-change').change(function(event) { $(&quot;body&quot;).prepend('&amp;lt;div class=&quot;spinner&quot;&amp;gt;&amp;lt;/div&amp;gt;'); $(this).submit(); }).on(&quot;ajax:success&quot;, function(e) { }).on(&quot;ajax:error&quot;, function(e) { }).on(&quot;ajax:complete&quot;, function(e) { $(&quot;.spinner&quot;).remove(); });}); And then this in the test case to ensure that the test is synchronized with the browser: assert_no_selector &quot;.spinner&quot; (This JavaScript works for the case where I had forms that I wanted to automatically submit on any change to any of their fields. A traditional form that has a submit button would want to catch the submit event for the form.) For completeness, here’s some SASS to put in assets/stylesheets/spinner.scss to actually show a spinner: .spinner { @extend .centered-in-window; z-index: 1; height: 64px; width: 64px; animation: rotate 1s infinite linear; -webkit-animation: rotate 1s infinite linear; border: 8px solid #fff; border-right-color: black; border-radius: 50%;}@keyframes rotate { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); }}@-webkit-keyframes rotate { 0% { -webkit-transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); }}.centered-in-window { position: fixed; top: 50%; left: 50%; /* bring your own prefixes */ transform: translate(-50%, -50%);} Don’t forget to add @import &quot;spinner&quot;; to your assets/stylesheets/application.scss file. Only the Back End Changes When the user changes, say, a check box or a drop down menu (a select tag), nothing happens on the browser side other than the change the user made. But often, on the back end something is added, changed, or removed from the database. I tried to use Rails’ assert_difference to test that the right thing happened, but more often than not it would fail, because by the time the database was updated, Capybara had already finished executing the assert_difference. Because of that, my tests were full of examples like this: assert_difference &quot;CisOutage.count&quot; do click_on &quot;Save&quot; sleep 2end Each time I put in a sleep 2 in my test cases, I was making the test take almost two seconds longer than it needed to. If I didn’t have the sleep 2 in the test, the test would fail, because the CisOutage record wouldn’t have been saved in the database by the time the test case evaluated the CisOutage.count. To fix this, I wrote my own assert_difference for system tests, shamelessly stealing from the Rails source and a few items from Capybara. Like the Rails assert_difference, it runs the expressions to get the “before” value, executes the block, then runs the expressions again to get the after values. Unlike the Rails version, if any of the expressions fail to produce the desired result, it sleeps for a tenth of a second, then retries the expressions, until all the expressions produce the desired result, or two seconds pass: ### Check for a difference in `expression`, but repeat the check until it's# true, or two seconds pass. Taken from Rails source and leveraging# some Capybara stuff.def assert_difference(expression, difference = 1, message = nil, &amp;amp;block) expressions = Array(expression) exps = expressions.map do |e| e.respond_to?(:call) ? e : -&amp;gt; { eval(e, block.binding) } end before = exps.map(&amp;amp;:call) after = [] retval = yield start_time = Capybara::Helpers.monotonic_time loop do after = exps.map(&amp;amp;:call) break if before.zip(after).all? { |(b, a)| a == b + difference } || start_time + 2 &amp;lt; Capybara::Helpers.monotonic_time sleep 0.1 end expressions.zip(after).each_with_index do |(code, a), i| error = &quot;#{code.inspect} didn't change by #{difference}&quot; error = &quot;#{message}.\n#{error}&quot; if message assert_equal(before[i] + difference, a, error) end retvalend For Rails 5.1, I put this in the ApplicationSystemTestCase class in app/test/application_system_test_case.rb. For Rails 5.0 and 4.x, I would have to put it somewhere else. This code could be improved in many ways, but it was good enough to allow me to remove 40 seconds worth of arbitrary sleep statements in my system test cases. Now my test case looks like this: assert_difference &quot;CisOutage.count&quot; do click_on &quot;Save&quot;end And the test typically waits at most a couple of tenths of a second before succeeding. Only the Order Changes To test “latest first/earliest first” buttons, and similar actions, I had to go beyond a simple assert_text on the page. At first I tried getting all the list items within the list I was interested in, like this: click_link &quot;Oldest First&quot;notes = all(&quot;li.note&quot;)within(notes[0]) do assert_text &quot;Note B&quot; assert_text &quot;1 day ago&quot; assert_no_link &quot;Edit&quot; assert_text &quot;Can Edit CIs/Outages&quot;end This would fail if Capybara happened to grab the list before the back end had replied to the browser. More often than not, I found Capybara would populate the notes variable with nodes from the page before the back end responded with the re-ordered list. In the best case, I would simply get test failures. In other cases, Capybara would actually throw errors (the dreaded “stale node” error). This is because once the browser gets the response from the back end, the nodes in notes will no longer be on the current page of the browser. My fix was to use a more specific selector to take advantage of Capybara’s waiting behaviour. This method works for one specific case I had: def assert_synchronized(text, ordinal = 0) assert_selector &quot;li.note:nth-of-type(#{ordinal + 1}) .note-body&quot;, text: text end This finds the (ordinal + 1)th list item, and then if it has class note, finds all nodes with class note-body with the li, and checks to see if they have the desired text. When I put this assert_synchronized call somewhere in the test case, Capybara checks that the first item in the list has the text I expect, and will do its standard waiting behaviour before proceeding with the rest of the test. I was using 0-based indexes in the rest of the code, but CSS selectors are 1-based, which is why the ordinal + 1. Also, in a more general case I’d have to make sure I was in the right list, but on this page there was only one list. The actual selector would be different for every page or case. The above is just one example. Here’s how I fixed the above test case: click_link &quot;Oldest First&quot;assert_synchronized(&quot;Note B&quot;)notes = all(&quot;li.note&quot;)within(notes[0]) do assert_text &quot;Note B&quot; assert_text &quot;1 day ago&quot; assert_no_link &quot;Edit&quot; assert_text &quot;Can Edit CIs/Outages&quot;end I ran into a couple of challenges with this approach: The nth-of-type(x) selector is literally on the type, AKA HTML tag, and not the other selectors. In other words, something like li.note:nth-of-type(1) gets the first li regardless of its classes, then checks to see if the li has class note. So if the list is mixed and the first li does not have class note, the selector returns nothingI had a mixed list as described above, where not every li had the same class. To work around the problem, I was looking at the second item in the list. But the list only had three items in it, so looking at the second item wasn’t synchronizing Capybara with the back end. It took me a while before the light bulb when on and I realized why my test was getting out of sync</summary></entry><entry><title type="html">Changing IP of Brother Scanner Under Linux</title><link href="http://0.0.0.0:4000/2016/12/23/changing-ip-of-brother-scanner-under.html" rel="alternate" type="text/html" title="Changing IP of Brother Scanner Under Linux" /><published>2016-12-23T16:31:00+00:00</published><updated>2016-12-23T16:31:00+00:00</updated><id>http://0.0.0.0:4000/2016/12/23/changing-ip-of-brother-scanner-under</id><content type="html" xml:base="http://0.0.0.0:4000/2016/12/23/changing-ip-of-brother-scanner-under.html">&lt;p&gt;We had a power outage this week. Some devices on my home network got new IP addresses when the power came back on. One of the devices that got a new IP address was my Brother MFC-9340CDW printer/scanner/fax. The printer was still working fine, but I couldn’t scan.&lt;/p&gt; &lt;p&gt;The tl;dr is to remove the old configuration and set the new one:&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sudo&lt;/span&gt; brsaneconfig4 -r MFC-&lt;span class=&quot;hljs-number&quot;&gt;9340&lt;/span&gt;CDW&lt;br /&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sudo&lt;/span&gt; brsaneconfig4 &lt;span class=&quot;hljs-operator&quot;&gt;-a&lt;/span&gt; name=MFC-&lt;span class=&quot;hljs-number&quot;&gt;9340&lt;/span&gt;CDW model=MFC-&lt;span class=&quot;hljs-number&quot;&gt;9340&lt;/span&gt;CDW ip=&lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0.124&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I got the new IP address from poking buttons on the front panel of the printer. &lt;br&gt;The name of the device may be different, but the above is what I had from the default setup. &lt;br&gt;&lt;code&gt;brsaneconfig4 -q&lt;/code&gt; gives all the devices supported, and also the last line is the current configuration. &lt;br&gt;That’s useful to see what the currently configured IP address is, according to the software on the computer.&lt;/p&gt; &lt;p&gt;To figure out what was wrong with &lt;code&gt;simple-scan&lt;/code&gt;, I did this in a terminal to see debugging output:&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs lasso&quot;&gt;simple&lt;span class=&quot;hljs-attribute&quot;&gt;-scan&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;-d&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Another useful command is:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs lasso&quot;&gt;brsaneconfig4 &lt;span class=&quot;hljs-attribute&quot;&gt;-p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;which runs &lt;code&gt;ping&lt;/code&gt; on the scanner. However, in my case another device had the scanner’s old IP address, &lt;br&gt;so the &lt;code&gt;ping&lt;/code&gt; appeared to be working fine.&lt;/p&gt;</content><author><name>Larry Reid</name></author><summary type="html">We had a power outage this week. Some devices on my home network got new IP addresses when the power came back on. One of the devices that got a new IP address was my Brother MFC-9340CDW printer/scanner/fax. The printer was still working fine, but I couldn’t scan. The tl;dr is to remove the old configuration and set the new one: sudo brsaneconfig4 -r MFC-9340CDWsudo brsaneconfig4 -a name=MFC-9340CDW model=MFC-9340CDW ip=192.168.0.124 I got the new IP address from poking buttons on the front panel of the printer. The name of the device may be different, but the above is what I had from the default setup. brsaneconfig4 -q gives all the devices supported, and also the last line is the current configuration. That’s useful to see what the currently configured IP address is, according to the software on the computer. To figure out what was wrong with simple-scan, I did this in a terminal to see debugging output: simple-scan -d Another useful command is: brsaneconfig4 -p which runs ping on the scanner. However, in my case another device had the scanner’s old IP address, so the ping appeared to be working fine.</summary></entry><entry><title type="html">Disabling Warnings and Autocorrect in Rubocop</title><link href="http://0.0.0.0:4000/2016/11/18/disabling-warnings-and-autocorrect-in.html" rel="alternate" type="text/html" title="Disabling Warnings and Autocorrect in Rubocop" /><published>2016-11-18T14:53:00+00:00</published><updated>2016-11-18T14:53:00+00:00</updated><id>http://0.0.0.0:4000/2016/11/18/disabling-warnings-and-autocorrect-in</id><content type="html" xml:base="http://0.0.0.0:4000/2016/11/18/disabling-warnings-and-autocorrect-in.html">&lt;p&gt;I finally found how to disable Rubocop messages and auto-correction on a file or individual line basis.&lt;/p&gt; &lt;p&gt;I have Atom set up to run Rubocop and auto-correct my files on save. Most of the time this is very handy. I especially like how most of the time it indents my code to the standard. But I was struggling to debug some test cases, and I wanted to use Capybara’s  &lt;code&gt;save_and_open_page&lt;/code&gt; to see what Capybara was actually looking at. When I saved the file, Rubocop and Atom helpfully deleted the line before I could even run the test case.&lt;/p&gt; &lt;p&gt;But then I discovered this:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs bash&quot;&gt;save_and_open_page &lt;span class=&quot;hljs-comment&quot;&gt;# rubocop:disable Lint/Debugger&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Problem solved.&lt;/p&gt; &lt;p&gt;Since the &lt;code&gt;Lint/Debugger&lt;/code&gt; cop is arguably not applicable to your test files, I sometimes put this at the top of a test file:&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs vala&quot;&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;# rubocop:disable Lint/Debugger&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above case, I could turn Rubocop back on if I needed it with:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs vala&quot;&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;# rubocop:enable Lint/Debugger&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is described in the manual at &lt;a href=&quot;http://rubocop.readthedocs.io/en/latest/configuration/#disabling-cops-within-source-code&quot;&gt;http://rubocop.readthedocs.io/en/latest/configuration/#disabling-cops-within-source-code&lt;/a&gt;, but I had trouble finding that section with Google.&lt;/p&gt;</content><author><name>Larry Reid</name></author><summary type="html">I finally found how to disable Rubocop messages and auto-correction on a file or individual line basis. I have Atom set up to run Rubocop and auto-correct my files on save. Most of the time this is very handy. I especially like how most of the time it indents my code to the standard. But I was struggling to debug some test cases, and I wanted to use Capybara’s save_and_open_page to see what Capybara was actually looking at. When I saved the file, Rubocop and Atom helpfully deleted the line before I could even run the test case. But then I discovered this: save_and_open_page # rubocop:disable Lint/Debugger Problem solved. Since the Lint/Debugger cop is arguably not applicable to your test files, I sometimes put this at the top of a test file: # rubocop:disable Lint/Debugger In the above case, I could turn Rubocop back on if I needed it with: # rubocop:enable Lint/Debugger This is described in the manual at http://rubocop.readthedocs.io/en/latest/configuration/#disabling-cops-within-source-code, but I had trouble finding that section with Google.</summary></entry><entry><title type="html">Enterprise Challenges to Continuous Delivery</title><link href="http://0.0.0.0:4000/2016/08/29/enterprise-challenges-to-continuous.html" rel="alternate" type="text/html" title="Enterprise Challenges to Continuous Delivery" /><published>2016-08-29T04:47:00+00:00</published><updated>2016-08-29T04:47:00+00:00</updated><id>http://0.0.0.0:4000/2016/08/29/enterprise-challenges-to-continuous</id><content type="html" xml:base="http://0.0.0.0:4000/2016/08/29/enterprise-challenges-to-continuous.html">&lt;p&gt;On one of my recent projects I noticed a challenge to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;continuous delivery&lt;/a&gt; (CD) approach in the enterprise that I haven’t seen mentioned: Software that requires a paid license. &lt;/p&gt; &lt;p&gt;Most CD approaches are based on easily creating instances of a virtual machine. Software with a paid license often has mechanisms, like the MAC address of the first network interface has to be registered with the software vendor’s license server, to prevent automatically creating multiple instances of a virtual machine. Or it may have a license compliance tool that will get very confused by instances of virtual machines appearing and disappearing rapidly.&lt;/p&gt; &lt;p&gt;It’s probably not impossible to do CD with your paid software. Obviously, the easiest way to deal with the problem is to use software that’s completely free to use. If you can’t do that, you’ll need to understand how the license restrictions work, and then tailor the continuous deployment approach around those restrictions. Not easy, but probably doable.&lt;/p&gt;</content><author><name>Larry Reid</name></author><summary type="html">On one of my recent projects I noticed a challenge to a continuous delivery (CD) approach in the enterprise that I haven’t seen mentioned: Software that requires a paid license. Most CD approaches are based on easily creating instances of a virtual machine. Software with a paid license often has mechanisms, like the MAC address of the first network interface has to be registered with the software vendor’s license server, to prevent automatically creating multiple instances of a virtual machine. Or it may have a license compliance tool that will get very confused by instances of virtual machines appearing and disappearing rapidly. It’s probably not impossible to do CD with your paid software. Obviously, the easiest way to deal with the problem is to use software that’s completely free to use. If you can’t do that, you’ll need to understand how the license restrictions work, and then tailor the continuous deployment approach around those restrictions. Not easy, but probably doable.</summary></entry><entry><title type="html">Configuring Applications</title><link href="http://0.0.0.0:4000/2016/08/29/configuring-applications.html" rel="alternate" type="text/html" title="Configuring Applications" /><published>2016-08-29T04:33:00+00:00</published><updated>2016-08-29T04:33:00+00:00</updated><id>http://0.0.0.0:4000/2016/08/29/configuring-applications</id><content type="html" xml:base="http://0.0.0.0:4000/2016/08/29/configuring-applications.html">&lt;p&gt;I once had experience with a browser-based application that would show pages that were links to another application. Since the URL of the other application would change depending on the environment (development, test, staging, production, etc.), the developers decided to put the URL in a field in a row in a configuration table in the database.&lt;/p&gt; &lt;p&gt;So far, so good. Per-environment configuration needs to be changeable. But it turned out that putting configuration in the database had some challenges. Configuration in the database is less convenient to put under revision control and to deploy with automated tools. So we didn’t have the configuration as part of an automated build tool, and it was a bureaucratic nightmare each time we had to change the URL. (Simple files are easier to integrate with revision control and automated deployment tools.)&lt;/p&gt; &lt;p&gt;But what really caused problems was that the database contained more than just the protocol, host, domain, and port – the stuff that would change for each environment. It included a template for query parameters as well. So the line in the configuration table looked something like this:&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs avrasm&quot;&gt;&lt;span class=&quot;hljs-label&quot;&gt;https:&lt;/span&gt;//otherapplication&lt;span class=&quot;hljs-preprocessor&quot;&gt;.example&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.com&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;20400&lt;/span&gt;/search-page?parm1=%&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,parm2=%&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The application would take the query string (&lt;code&gt;?parm1=%1,parm2=%2&lt;/code&gt;), and fill in the placeholders (&lt;code&gt;%1&lt;/code&gt;, &lt;code&gt;%2&lt;/code&gt;) with values. The problem was, every time the requirements expanded and we needed more parameters, the configuration string had to change &lt;em&gt;for every environment.&lt;/em&gt; &lt;/p&gt; &lt;p&gt;The parameters weren’t part of the environment set-up, so they never should have been put in the configuration table. When you’re parametrizing an application configuration, make sure you put &lt;em&gt;only&lt;/em&gt; things that change per environment into the environment configuration parameters. &lt;/p&gt; &lt;p&gt;Unrelated to the above point, but important to note, is that we also found it very inconvenient that the placeholder marker in the URL was a percent sign. Percent signs are &lt;a href=&quot;https://en.wikipedia.org/wiki/Percent-encoding&quot;&gt;URL-encodeable&lt;/a&gt;. When we had to e-mail each other with updates to the URL, we were constantly tripped up by our e-mail and spreadsheet programs “helpfully” URL-encoding the query parameters for us, turning &lt;code&gt;%1&lt;/code&gt; into &lt;code&gt;%251&lt;/code&gt;, for example.&lt;/p&gt;</content><author><name>Larry Reid</name></author><summary type="html">I once had experience with a browser-based application that would show pages that were links to another application. Since the URL of the other application would change depending on the environment (development, test, staging, production, etc.), the developers decided to put the URL in a field in a row in a configuration table in the database. So far, so good. Per-environment configuration needs to be changeable. But it turned out that putting configuration in the database had some challenges. Configuration in the database is less convenient to put under revision control and to deploy with automated tools. So we didn’t have the configuration as part of an automated build tool, and it was a bureaucratic nightmare each time we had to change the URL. (Simple files are easier to integrate with revision control and automated deployment tools.) But what really caused problems was that the database contained more than just the protocol, host, domain, and port – the stuff that would change for each environment. It included a template for query parameters as well. So the line in the configuration table looked something like this: https://otherapplication.example.com:20400/search-page?parm1=%1,parm2=%2 The application would take the query string (?parm1=%1,parm2=%2), and fill in the placeholders (%1, %2) with values. The problem was, every time the requirements expanded and we needed more parameters, the configuration string had to change for every environment. The parameters weren’t part of the environment set-up, so they never should have been put in the configuration table. When you’re parametrizing an application configuration, make sure you put only things that change per environment into the environment configuration parameters. Unrelated to the above point, but important to note, is that we also found it very inconvenient that the placeholder marker in the URL was a percent sign. Percent signs are URL-encodeable. When we had to e-mail each other with updates to the URL, we were constantly tripped up by our e-mail and spreadsheet programs “helpfully” URL-encoding the query parameters for us, turning %1 into %251, for example.</summary></entry><entry><title type="html">Citrix in a Window on Linux</title><link href="http://0.0.0.0:4000/2016/07/19/citrix-in-window-on-linux.html" rel="alternate" type="text/html" title="Citrix in a Window on Linux" /><published>2016-07-19T13:40:00+00:00</published><updated>2016-07-19T13:40:00+00:00</updated><id>http://0.0.0.0:4000/2016/07/19/citrix-in-window-on-linux</id><content type="html" xml:base="http://0.0.0.0:4000/2016/07/19/citrix-in-window-on-linux.html">[Edit: This was not the solution. It worked the first time, but now it isn't working again.]&lt;br /&gt;&lt;br /&gt;I was using Citrix Receiver quite successfully on Ubuntu 16.04 and Linux Mint 13 to remotely access my customer's network, but I couldn't make it start in a window. It was coming up in full screen mode. I could minimize the whole Citrix session by doing Ctrl-F2 (to tell Receiver to pass the next key to Linux), then Ctrl-Super-downarrow (Super is the &quot;Windows&quot; key). However, I wanted to be able to watch the Citrix session on one monitor, while I worked on other stuff on the other monitor.&lt;br /&gt;&lt;br /&gt;I finally found this blog that told me how to set up the Receiver config files to get Receiver to start in a window:&amp;nbsp;&lt;a href=&quot;http://blog.eek-a-geek.info/2014/10/citrix-receiver-for-linux-131-on-64-bit.html&quot;&gt;http://blog.eek-a-geek.info/2014/10/citrix-receiver-for-linux-131-on-64-bit.html&lt;/a&gt;. What it says is:&lt;br /&gt;&lt;br /&gt;Edit &quot;~/.ICAClient/All_Regions.ini&quot;, replacing the line &quot;TWIMode=*&quot; to &quot;TWIMode=Off&quot;.&lt;br /&gt;&lt;br /&gt;Edit &quot;~/.ICAClient/wfclient.ini&quot;, adding a line &quot;TWIMode=off&quot; to the &quot;[WFClient]&quot; section, and adding a line &quot;UseFullScreen=True&quot; to the &quot;[Thinwire3.0]&quot; section.&lt;br /&gt;&lt;br /&gt;</content><author><name>Larry Reid</name></author><category term="Citrix" /><summary type="html">[Edit: This was not the solution. It worked the first time, but now it isn't working again.]I was using Citrix Receiver quite successfully on Ubuntu 16.04 and Linux Mint 13 to remotely access my customer's network, but I couldn't make it start in a window. It was coming up in full screen mode. I could minimize the whole Citrix session by doing Ctrl-F2 (to tell Receiver to pass the next key to Linux), then Ctrl-Super-downarrow (Super is the &quot;Windows&quot; key). However, I wanted to be able to watch the Citrix session on one monitor, while I worked on other stuff on the other monitor.I finally found this blog that told me how to set up the Receiver config files to get Receiver to start in a window:&amp;nbsp;http://blog.eek-a-geek.info/2014/10/citrix-receiver-for-linux-131-on-64-bit.html. What it says is:Edit &quot;~/.ICAClient/All_Regions.ini&quot;, replacing the line &quot;TWIMode=*&quot; to &quot;TWIMode=Off&quot;.Edit &quot;~/.ICAClient/wfclient.ini&quot;, adding a line &quot;TWIMode=off&quot; to the &quot;[WFClient]&quot; section, and adding a line &quot;UseFullScreen=True&quot; to the &quot;[Thinwire3.0]&quot; section.</summary></entry><entry><title type="html">WebEx on Ubuntu 16.04</title><link href="http://0.0.0.0:4000/2016/05/31/hello.html" rel="alternate" type="text/html" title="WebEx on Ubuntu 16.04" /><published>2016-05-31T03:59:00+00:00</published><updated>2016-05-31T03:59:00+00:00</updated><id>http://0.0.0.0:4000/2016/05/31/hello</id><content type="html" xml:base="http://0.0.0.0:4000/2016/05/31/hello.html">&lt;h2 id=&quot;java&quot;&gt;Java&lt;/h2&gt; &lt;p&gt;You need Java installed. I used the Open JRE. Some places on the web say you need the Oracle version, but it works for me with the Open JRE and IcedTea:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sudo&lt;/span&gt; apt-get install openjdk-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;-jre icedtea-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;-plugin&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;That’s all you need to get the meeting to work, but…&lt;/p&gt;   &lt;h2 id=&quot;missing-i386-libraries&quot;&gt;Missing i386 Libraries&lt;/h2&gt; &lt;p&gt;But you won’t be able to share screens without a bunch of missing i386 libraries. The WebEx plugin is 32-bit, so you need to install some libraries that aren’t installed by default.&lt;/p&gt; &lt;p&gt;Check to see if you’re missing libraries by going into &lt;code&gt;~/.webex/&lt;/code&gt; and then into a sub-directory whose name is all digits and underscores. Once there, run:&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;ldd *.so | grep &lt;span class=&quot;hljs-string&quot;&gt;&quot;not found&quot;&lt;/span&gt; | cut &lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt;1 &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;' '&lt;/span&gt; | tr &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'\t'&lt;/span&gt; | uniq&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I got about a dozen missing libraries on a relatively new install of Ubuntu 16.04. You may get different results, depending on what’s been installed on your system since you initially installed Ubuntu 16.04.&lt;/p&gt; &lt;p&gt;I installed the following packages [updated with suggestions from readers] (fewer than a dozen, because some packages pull in multiple libraries as dependencies):&lt;/p&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sudo&lt;/span&gt; apt-get install libxmu6:i386&lt;br /&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sudo&lt;/span&gt; apt-get install libgtk2.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:i386&lt;br /&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sudo&lt;/span&gt; apt-get install libpangox-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:i386&lt;br /&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sudo&lt;/span&gt; apt-get install libpangoxft-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;:i386&lt;br /&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sudo&lt;/span&gt; apt-get install libxtst6:i386&lt;br /&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sudo&lt;/span&gt; apt-get install libasound2:i386&lt;br /&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sudo&lt;/span&gt; apt-get install libxv1:i386&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you check again with the above &lt;code&gt;ldd&lt;/code&gt; command, the only library you should still be missing is &lt;code&gt;libjawt.so&lt;/code&gt;. This library doesn’t seem to be needed.&lt;/p&gt;</content><author><name>Larry Reid</name></author><summary type="html">Java You need Java installed. I used the Open JRE. Some places on the web say you need the Oracle version, but it works for me with the Open JRE and IcedTea: sudo apt-get install openjdk-8-jre icedtea-8-plugin That’s all you need to get the meeting to work, but… Missing i386 Libraries But you won’t be able to share screens without a bunch of missing i386 libraries. The WebEx plugin is 32-bit, so you need to install some libraries that aren’t installed by default. Check to see if you’re missing libraries by going into ~/.webex/ and then into a sub-directory whose name is all digits and underscores. Once there, run: ldd *.so | grep &quot;not found&quot; | cut -f1 -d' ' | tr -d '\t' | uniq I got about a dozen missing libraries on a relatively new install of Ubuntu 16.04. You may get different results, depending on what’s been installed on your system since you initially installed Ubuntu 16.04. I installed the following packages [updated with suggestions from readers] (fewer than a dozen, because some packages pull in multiple libraries as dependencies): sudo apt-get install libxmu6:i386sudo apt-get install libgtk2.0-0:i386sudo apt-get install libpangox-1.0-0:i386sudo apt-get install libpangoxft-1.0:i386sudo apt-get install libxtst6:i386sudo apt-get install libasound2:i386sudo apt-get install libxv1:i386 If you check again with the above ldd command, the only library you should still be missing is libjawt.so. This library doesn’t seem to be needed.</summary></entry></feed>