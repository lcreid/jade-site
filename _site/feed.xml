<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2018-10-05T21:53:53+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Jade Systems Inc.</title><subtitle>Jade Systems builds custom web applications for enterprises and start-ups.</subtitle><entry><title type="html">Changing Fonts on Linux Fillable PDF Forms</title><link href="http://0.0.0.0:4000/2018/01/26/changing-fonts-on-linux-fillable-pdf.html" rel="alternate" type="text/html" title="Changing Fonts on Linux Fillable PDF Forms" /><published>2018-01-26T19:50:00+00:00</published><updated>2018-01-26T19:50:00+00:00</updated><id>http://0.0.0.0:4000/2018/01/26/changing-fonts-on-linux-fillable-pdf</id><content type="html" xml:base="http://0.0.0.0:4000/2018/01/26/changing-fonts-on-linux-fillable-pdf.html">&lt;p&gt;I was trying to fill out the &lt;a href=&quot;https://www.canada.ca/content/dam/ircc/migration/ircc/english/passport/forms/pdf/pptc054.pdf&quot;&gt;Canadian passport renewal form&lt;/a&gt; on my Ubuntu 16.04 laptop. I was able to enter data into the fields just fine, but the font that was displayed after I left each field was almost unreadable.&lt;/p&gt;

&lt;p&gt;I had seen this problem before with other fillable PDFs, like for example some from the Canadian Revenue Agency, so I decided it was time to figure out the problem.&lt;/p&gt;

&lt;p&gt;I started by opening the form that was giving me grief, and clicked on File-&amp;gt; Properties, and then clicked on the Fonts tab. This gave me a list of fonts. Some of them were not the standard PDF fonts, as noted by the fact that it said “Not one of the standard 14 fonts.” just below the font name.&lt;/p&gt;

&lt;p&gt;(Background: The PDF specification says there are 14 standard fonts that should display the same, as much as possible, in any viewer.)&lt;/p&gt;

&lt;p&gt;I recognized two of the fonts as likely being &lt;a href=&quot;https://en.wikipedia.org/wiki/Monospaced_font&quot; title=&quot;monospaced&quot;&gt;monospaced&lt;/a&gt; fonts based on their names. Typically, forms designers use monospaced fonts for input because they can fit the text to pre-defined boxes on the form. I noticed that below the monospaced fonts, it said they were being substituted with “DejaVu Sans”, which didn’t sound like a monospaced font to me.&lt;/p&gt;

&lt;p&gt;So I poked around on Google and found a few useful pages. From them, I figured out the following:&lt;/p&gt;

&lt;p&gt;First, I put the following into &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.config/fontconfig/conf.avail/69-courierstd-to-couriernew.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE fontconfig SYSTEM &quot;fonts.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;fontconfig&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;match&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pattern&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;test&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;family&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;CourierStd&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/test&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;edit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;family&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prepend&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Courier New&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/fontconfig&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;By putting it in that directory, I made it available but not enabled. To enable it, I made a symbolic link to it by doing:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -s ~/.config/fontconfig/conf.avail/69-courierstd-to-couriernew.conf ~/.config/fontconfig/conf.d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CourierStd was one of the fonts that was in the PDF form, and was being substituted with DejaVu Sans. I knew that Courier New was a font on my system because it shows up in Libre Office Writer and other programs that deal with fonts. So the contents of the file tell Linux to use Courier New when a document asks for CourierStd.&lt;/p&gt;

&lt;p&gt;The way the fonts work on Ubuntu, it may take up to 30 seconds for the system to recognize the new substitution. After waiting for 30 seconds, I opened the passport renewal form again and voilà, I had Courier New on the fields I filled in.&lt;/p&gt;

&lt;p&gt;The above works for the logged in user. If I had more than one user ID on my system, I might have put the same file in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/fonts/conf.avail&lt;/code&gt;, and linked to it from &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/fonts/conf.d&lt;/code&gt;. That would make the substitution work for all users on the system.&lt;/p&gt;

&lt;p&gt;From what I understand, other Linux distributions may store their fonts in different places. You can try to figure out where to put the file by reading &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/fonts/fonts.conf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://wiki.ubuntu.com/Fonts&quot;&gt;Ubuntu wiki page on fonts&lt;/a&gt; is a good place to start if you want to learn more about fonts on Ubuntu.&lt;/p&gt;</content><author><name>Larry Reid</name></author><summary type="html">I was trying to fill out the Canadian passport renewal form on my Ubuntu 16.04 laptop. I was able to enter data into the fields just fine, but the font that was displayed after I left each field was almost unreadable.</summary></entry><entry><title type="html">Switching to Headless Chrome for Rails System Tests</title><link href="http://0.0.0.0:4000/2017/11/01/switching-to-headless-chrome-for-rails_31.html" rel="alternate" type="text/html" title="Switching to Headless Chrome for Rails System Tests" /><published>2017-11-01T02:10:00+00:00</published><updated>2017-11-01T02:10:00+00:00</updated><id>http://0.0.0.0:4000/2017/11/01/switching-to-headless-chrome-for-rails_31</id><content type="html" xml:base="http://0.0.0.0:4000/2017/11/01/switching-to-headless-chrome-for-rails_31.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I recently switched a Rails 5.1 application’s system tests from &lt;a href=&quot;https://github.com/teamcapybara/capybara&quot;&gt;Capybara&lt;/a&gt;, &lt;a href=&quot;https://github.com/teampoltergeist/poltergeist&quot;&gt;Poltergeist&lt;/a&gt;, and &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;, to Capybara, Selenium, and headless Chrome. We run the development and test environments of the application on a Vagrant box running Ubuntu 16.04 server.&lt;/p&gt;

&lt;p&gt;With the release of headless Chrome, &lt;a href=&quot;https://github.com/ariya/phantomjs/issues/15105&quot;&gt;PhantomJS is no longer being developed or maintained&lt;/a&gt;. It also used a different browser engine that the major browsers, and I was noticing that some test cases didn’t run exactly like they would in a real browser. So when I saw that there was a &lt;a href=&quot;https://github.com/rails/rails/pull/30930&quot;&gt;pull request&lt;/a&gt; in to Rails to change to Selenium and headless Chrome, I thought it was time to try it myself.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;The first thing I did was to install Google Chrome from a Google repository, so it’s easy to get updates:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add
echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list
sudo apt-get update
sudo apt-get install google-chrome-stable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;(Note that this configuration will change if/when &lt;a href=&quot;https://github.com/rails/rails/pull/30930&quot;&gt;Rails comes with configuration for headless Chrome&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;I set up the configuration in &lt;code class=&quot;highlighter-rouge&quot;&gt;test/application_system_test_case.rb&lt;/code&gt;. The Rails 5.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;driven_by&lt;/code&gt; allows some options to be set, but I couldn’t figure out how to set the options I needed, so I registered a separate driver for headless Chrome:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Capybara.register_driver(:headless_chrome) do |app|
    capabilities = Selenium::WebDriver::Remote::Capabilities.chrome(
      # This makes logs available, but doesn't cause them to appear
      # in real time on the console
      loggingPrefs: {
        browser: &quot;ALL&quot;,
        client: &quot;ALL&quot;,
        driver: &quot;ALL&quot;,
        server: &quot;ALL&quot;
      }
    )

    options = Selenium::WebDriver::Chrome::Options.new
    options.add_argument(&quot;window-size=1400,1200&quot;)
    options.add_argument(&quot;headless&quot;)
    options.add_argument(&quot;disable-gpu&quot;)

    Capybara::Selenium::Driver.new(
      app,
      browser: :chrome,
      desired_capabilities: capabilities,
      options: options
    )
  end

  driven_by :headless_chrome
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The arguments for &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;headless&quot;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;disable-gpu&quot;&lt;/code&gt; were necessary to make testing with headless Chrome work. I had to set the window size, because the default window size caused my application’s menu to collapse to a mobile device menu (I’m using Bootstrap 4).&lt;/p&gt;

&lt;h2 id=&quot;upgrade-capybara&quot;&gt;Upgrade Capybara&lt;/h2&gt;
&lt;p&gt;My 	&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; had the version of Capybara locked down. I found that a lot of problems went away simply by taking away the version constraint in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; and letting &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle upgrade capybara --conservative&lt;/code&gt; do its thing.&lt;/p&gt;

&lt;h2 id=&quot;fill_in-doesnt-fire-change-event&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fill_in&lt;/code&gt; Doesn’t Fire Change Event&lt;/h2&gt;
&lt;p&gt;I had some JavaScript that ran when input fields changed, via the &lt;code class=&quot;highlighter-rouge&quot;&gt;changed&lt;/code&gt; event. I had to add a newline to the end of the input text for force the change event to fire:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fill_in &quot;Fragment&quot;, with: &quot;Outage B\n&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fill_in-date-time-field-with--doesnt-work&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fill_in&lt;/code&gt; Date Time Field With &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; Doesn’t Work&lt;/h2&gt;
&lt;p&gt;Filling in a date time field with &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; to clear it worked with Poltergeist/PhantomJS. With Selenium and headless Chrome it gives:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Selenium::WebDriver::Error::InvalidElementStateError: invalid element state: Element must be user-editable in order to clear it.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So I changed the places where I had to clear a date or date time field to this instead:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find_field(&quot;Outages Before&quot;).send_keys :delete
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fill_in-date-field-with-date-works-differently&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fill_in&lt;/code&gt; Date Field With Date Works Differently&lt;/h2&gt;
&lt;p&gt;Selenium and headless Chrome seem to process &lt;code class=&quot;highlighter-rouge&quot;&gt;fill_in&lt;/code&gt; of a date field more like what the user would experience. My tests that worked with Poltergeist and PhantomJS didn’t work with headless Chrome and Selenium, although part of the problem may have been with the &lt;code class=&quot;highlighter-rouge&quot;&gt;change&lt;/code&gt; event triggers I had on the date fields.&lt;/p&gt;

&lt;p&gt;I got the tests to work by (mysteriously) entering the date as “12312017”, in other words, in the date order used by only one country in the whole known universe. I still had to assert against dates in the format “yyyy-mm-dd”.&lt;/p&gt;

&lt;p&gt;I also discovered that PhantomJS and/or Poltergeist was more forgiving about date formats in asserts, so I had to change a bunch of asserts where I had used the “dd/mm/yyyy” format.&lt;/p&gt;

&lt;h2 id=&quot;alerts&quot;&gt;Alerts&lt;/h2&gt;
&lt;p&gt;Alerts aren’t automatically dismissed, so I had to go through all my tests and put an &lt;code class=&quot;highlighter-rouge&quot;&gt;assert_accept&lt;/code&gt; block around actions like deletes, like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;accept_alert do
  click_link &quot;Delete&quot;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;empty-divs&quot;&gt;Empty &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;s&lt;/h2&gt;
&lt;p&gt;Selenium and Chrome seem to treat an empty &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; as if it’s not visible. I had to change some selectors that were looking for an empty &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; to something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;assert_selector &quot;.test-home-page&quot;, visible: :any
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;no-browser-logs-in-real-time-or-by-default&quot;&gt;No Browser Logs in Real Time (or by Default)&lt;/h2&gt;
&lt;p&gt;Browser logs don’t appear by default, and don’t appear in real time. To show what was in the browser log, I had to put the following in the test script [Edit: The following has changed since I originally wrote this]:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;puts page.driver.browser.manage.logs.get(:browser)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To even have the browser log available at all, I had to set up the configuration as described at the beginning of this post.&lt;/p&gt;

&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;/h2&gt;
&lt;p&gt;My system tests take about 50 % longer with headless Chrome, compared to PhantomJS.&lt;/p&gt;</content><author><name>Larry Reid</name></author><summary type="html">Introduction I recently switched a Rails 5.1 application’s system tests from Capybara, Poltergeist, and PhantomJS, to Capybara, Selenium, and headless Chrome. We run the development and test environments of the application on a Vagrant box running Ubuntu 16.04 server.</summary></entry><entry><title type="html">Tips for System Testing With Capybara</title><link href="http://0.0.0.0:4000/2017/10/14/tips-for-system-testing-with-capybara_37.html" rel="alternate" type="text/html" title="Tips for System Testing With Capybara" /><published>2017-10-14T18:35:00+00:00</published><updated>2017-10-14T18:35:00+00:00</updated><id>http://0.0.0.0:4000/2017/10/14/tips-for-system-testing-with-capybara_37</id><content type="html" xml:base="http://0.0.0.0:4000/2017/10/14/tips-for-system-testing-with-capybara_37.html">&lt;p&gt;One of the great challenges of system testing applications is the fact that there are two (or more) independent processes: One to run the test script. The other to run the browser. The actions in the test script and the actions as performed by the browser and the back end, are not necessarily synchronized the way they are in unit or controller tests.&lt;/p&gt;

&lt;p&gt;This can lead to tests the fail sometimes but not others. They may fail one in ten runs, or they may work on development machines, but fail on the continuous integration platform, or vice versa. &lt;a href=&quot;https://martinfowler.com/articles/nonDeterminism.html&quot;&gt;Some say&lt;/a&gt; that unreliable tests are one of the key things that lead people away from automated testing.&lt;/p&gt;

&lt;p&gt;I’ve struggled with unreliable tests on Rails applications using &lt;a href=&quot;http://teamcapybara.github.io/capybara/&quot;&gt;Capybara&lt;/a&gt;. Here are some of the solutions I’ve used successfully to make tests more reliable.&lt;/p&gt;

&lt;h2 id=&quot;spinner&quot;&gt;Spinner&lt;/h2&gt;
&lt;p&gt;I like this one because it’s what I should be doing for my users anyway. Anytime something is happening in the background that might take some time, the page should put up a spinner – something that shows that the user should wait.&lt;/p&gt;

&lt;p&gt;There are lots of spinners available on-line. Some examples are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://projects.lukehaas.me/css-loaders/&lt;/li&gt;
  &lt;li&gt;http://cssload.net/en/spinners&lt;/li&gt;
  &lt;li&gt;https://www.pexels.com/blog/css-only-loaders/ (the example below is based on the snake spinner from this link)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The spinner chosen is not important from the point of view of the test. The tests work on the presence or absence of the spinner element. The basic idea is this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Capybara test script initiates a JavaScript action that will take some time&lt;/li&gt;
  &lt;li&gt;The test browser begins running the JavaScript. The first thing the JavaScript does is put up the spinner by un-hiding the spinner element or adding the spinner element to the DOM. The spinner element should have a distinctive id or class&lt;/li&gt;
  &lt;li&gt;The Capybara script waits for the spinner to go away by doing something like:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; assert_no_selector &quot;.spinner&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;On completing the AJAX request, the JavaScript hides the spinner element or removes it from the DOM&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is one example of this technique from a Rails 5.1 application with Turbolinks. All it needs is this JavaScript in the application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;$(document).on('turbolinks:load', function(e) {
  $('form.js-submit-on-change').change(function(event) {
    $(&quot;body&quot;).prepend('&amp;lt;div class=&quot;spinner&quot;&amp;gt;&amp;lt;/div&amp;gt;');
    $(this).submit();
  }).on(&quot;ajax:success&quot;, function(e) {
  }).on(&quot;ajax:error&quot;, function(e) {
  }).on(&quot;ajax:complete&quot;, function(e) {
    $(&quot;.spinner&quot;).remove();
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then this in the test case to ensure that the test is synchronized with the browser:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;assert_no_selector &quot;.spinner&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(This JavaScript works for the case where I had forms that I wanted to automatically submit on any change to any of their fields. A traditional form that has a submit button would want to catch the submit event for the form.)&lt;/p&gt;

&lt;p&gt;For completeness, here’s some SASS to put in &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/stylesheets/spinner.scss&lt;/code&gt; to actually show a spinner:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-CSS&quot;&gt;.spinner {
  @extend .centered-in-window;
  z-index: 1;
  height: 64px;
  width: 64px;
  animation: rotate 1s infinite linear;
  -webkit-animation: rotate 1s infinite linear;
  border: 8px solid #fff;
  border-right-color: black;
  border-radius: 50%;
}

@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

@-webkit-keyframes rotate {
  0% {
    -webkit-transform: rotate(0deg);
  }

  100% {
    -webkit-transform: rotate(360deg);
  }
}

.centered-in-window {
  position: fixed;
  top: 50%;
  left: 50%;
  /* bring your own prefixes */
  transform: translate(-50%, -50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don’t forget to add &lt;code class=&quot;highlighter-rouge&quot;&gt;@import &quot;spinner&quot;;&lt;/code&gt; to your &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/stylesheets/application.scss&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;only-the-back-end-changes&quot;&gt;Only the Back End Changes&lt;/h2&gt;
&lt;p&gt;When the user changes, say, a check box or a drop down menu (a select tag), nothing happens on the browser side other than the change the user made. But often, on the back end something is added, changed, or removed from the database. I tried to use Rails’ &lt;code class=&quot;highlighter-rouge&quot;&gt;assert_difference&lt;/code&gt; to test that the right thing happened, but more often than not it would fail, because by the time the database was updated, Capybara had already finished executing the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert_difference&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because of that, my tests were full of examples like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;assert_difference &quot;CisOutage.count&quot; do
  click_on &quot;Save&quot;
  sleep 2
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each time I put in a &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep 2&lt;/code&gt; in my test cases, I was making the test take almost two seconds longer than it needed to. If I didn’t have the &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep 2&lt;/code&gt; in the test, the test would fail, because the &lt;code class=&quot;highlighter-rouge&quot;&gt;CisOutage&lt;/code&gt; record wouldn’t have been saved in the database by the time the test case evaluated the &lt;code class=&quot;highlighter-rouge&quot;&gt;CisOutage.count&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To fix this, I wrote my own &lt;code class=&quot;highlighter-rouge&quot;&gt;assert_difference&lt;/code&gt; for system tests, shamelessly stealing from the Rails source and a few items from Capybara. Like the Rails &lt;code class=&quot;highlighter-rouge&quot;&gt;assert_difference&lt;/code&gt;, it runs the expressions to get the “before” value, executes the block, then runs the expressions again to get the after values. Unlike the Rails version, if any of the expressions fail to produce the desired result, it sleeps for a tenth of a second, then retries the expressions, until all the expressions produce the desired result, or two seconds pass:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;##
# Check for a difference in `expression`, but repeat the check until it's
# true, or two seconds pass. Taken from Rails source and leveraging
# some Capybara stuff.
def assert_difference(expression, difference = 1, message = nil, &amp;amp;block)
  expressions = Array(expression)

  exps = expressions.map do |e|
    e.respond_to?(:call) ? e : -&amp;gt; { eval(e, block.binding) }
  end
  before = exps.map(&amp;amp;:call)
  after = []

  retval = yield

  start_time = Capybara::Helpers.monotonic_time
  loop do
    after = exps.map(&amp;amp;:call)
    break if before.zip(after).all? { |(b, a)| a == b + difference } ||
             start_time + 2 &amp;lt; Capybara::Helpers.monotonic_time
    sleep 0.1
  end

  expressions.zip(after).each_with_index do |(code, a), i|
    error  = &quot;#{code.inspect} didn't change by #{difference}&quot;
    error  = &quot;#{message}.\n#{error}&quot; if message
    assert_equal(before[i] + difference, a, error)
  end

  retval
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Rails 5.1, I put this in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationSystemTestCase&lt;/code&gt; class in &lt;code class=&quot;highlighter-rouge&quot;&gt;app/test/application_system_test_case.rb&lt;/code&gt;. For Rails 5.0 and 4.x, I would have to put it somewhere else.&lt;/p&gt;

&lt;p&gt;This code could be improved in many ways, but it was good enough to allow me to remove 40 seconds worth of arbitrary &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; statements in my system test cases.&lt;/p&gt;

&lt;p&gt;Now my test case looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;assert_difference &quot;CisOutage.count&quot; do
  click_on &quot;Save&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the test typically waits at most a couple of tenths of a second before succeeding.&lt;/p&gt;

&lt;h2 id=&quot;only-the-order-changes&quot;&gt;Only the Order Changes&lt;/h2&gt;
&lt;p&gt;To test “latest first/earliest first” buttons, and similar actions, I had to go beyond a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;assert_text&lt;/code&gt; on the page. At first I tried getting all the list items within the list I was interested in, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;click_link &quot;Oldest First&quot;
notes = all(&quot;li.note&quot;)
within(notes[0]) do
  assert_text &quot;Note B&quot;
  assert_text &quot;1 day ago&quot;
  assert_no_link &quot;Edit&quot;
  assert_text &quot;Can Edit CIs/Outages&quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would fail if Capybara happened to grab the list &lt;em&gt;before&lt;/em&gt; the back end had replied to the browser. More often than not, I found Capybara would populate the &lt;code class=&quot;highlighter-rouge&quot;&gt;notes&lt;/code&gt; variable with nodes from the page &lt;em&gt;before&lt;/em&gt; the back end responded with the re-ordered list. In the best case, I would simply get test failures. In other cases, Capybara would actually throw errors (the dreaded “stale node” error). This is because once the browser gets the response from the back end, the nodes in &lt;code class=&quot;highlighter-rouge&quot;&gt;notes&lt;/code&gt; will no longer be on the current page of the browser.&lt;/p&gt;

&lt;p&gt;My fix was to use a more specific selector to take advantage of &lt;a href=&quot;http://www.rubydoc.info/github/teamcapybara/capybara#asynchronous-javascript-ajax-and-friends&quot;&gt;Capybara’s waiting behaviour&lt;/a&gt;. This method works for one specific case I had:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;  def assert_synchronized(text, ordinal = 0)
    assert_selector &quot;li.note:nth-of-type(#{ordinal + 1}) .note-body&quot;, text: text
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This finds the &lt;code class=&quot;highlighter-rouge&quot;&gt;(ordinal + 1)&lt;/code&gt;th list item, and then if it has class &lt;code class=&quot;highlighter-rouge&quot;&gt;note&lt;/code&gt;, finds all nodes with class &lt;code class=&quot;highlighter-rouge&quot;&gt;note-body&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;li&lt;/code&gt;, and checks to see if they have the desired text.&lt;/p&gt;

&lt;p&gt;When I put this &lt;code class=&quot;highlighter-rouge&quot;&gt;assert_synchronized&lt;/code&gt; call somewhere in the test case, Capybara checks that the first item in the list has the text I expect, and will do its standard waiting behaviour before proceeding with the rest of the test.&lt;/p&gt;

&lt;p&gt;I was using 0-based indexes in the rest of the code, but CSS selectors are 1-based, which is why the &lt;code class=&quot;highlighter-rouge&quot;&gt;ordinal + 1&lt;/code&gt;. Also, in a more general case I’d have to make sure I was in the right list, but on this page there was only one list. The actual selector would be different for every page or case. The above is just one example.&lt;/p&gt;

&lt;p&gt;Here’s how I fixed the above test case:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;click_link &quot;Oldest First&quot;
assert_synchronized(&quot;Note B&quot;)
notes = all(&quot;li.note&quot;)
within(notes[0]) do
  assert_text &quot;Note B&quot;
  assert_text &quot;1 day ago&quot;
  assert_no_link &quot;Edit&quot;
  assert_text &quot;Can Edit CIs/Outages&quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ran into a couple of challenges with this approach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;nth-of-type(x)&lt;/code&gt; selector is literally on the type, AKA HTML tag, and not the other selectors. In other words, something like &lt;code class=&quot;highlighter-rouge&quot;&gt;li.note:nth-of-type(1)&lt;/code&gt; gets the first &lt;code class=&quot;highlighter-rouge&quot;&gt;li&lt;/code&gt; regardless of its classes, then checks to see if the &lt;code class=&quot;highlighter-rouge&quot;&gt;li&lt;/code&gt; has class &lt;code class=&quot;highlighter-rouge&quot;&gt;note&lt;/code&gt;. So if the list is mixed and the first &lt;code class=&quot;highlighter-rouge&quot;&gt;li&lt;/code&gt; does not have class &lt;code class=&quot;highlighter-rouge&quot;&gt;note&lt;/code&gt;, the selector returns nothing&lt;/li&gt;
  &lt;li&gt;I had a mixed list as described above, where not every &lt;code class=&quot;highlighter-rouge&quot;&gt;li&lt;/code&gt; had the same class. To work around the problem, I was looking at the second item in the list. But the list only had three items in it, so looking at the second item wasn’t synchronizing Capybara with the back end. It took me a while before the light bulb when on and I realized why my test was getting out of sync&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Larry Reid</name></author><summary type="html">One of the great challenges of system testing applications is the fact that there are two (or more) independent processes: One to run the test script. The other to run the browser. The actions in the test script and the actions as performed by the browser and the back end, are not necessarily synchronized the way they are in unit or controller tests.</summary></entry><entry><title type="html">Changing IP of Brother Scanner Under Linux</title><link href="http://0.0.0.0:4000/2016/12/23/changing-ip-of-brother-scanner-under.html" rel="alternate" type="text/html" title="Changing IP of Brother Scanner Under Linux" /><published>2016-12-23T16:31:00+00:00</published><updated>2016-12-23T16:31:00+00:00</updated><id>http://0.0.0.0:4000/2016/12/23/changing-ip-of-brother-scanner-under</id><content type="html" xml:base="http://0.0.0.0:4000/2016/12/23/changing-ip-of-brother-scanner-under.html">&lt;p&gt;We had a power outage this week. Some devices on my home network got new IP addresses when the power came back on. One of the devices that got a new IP address was my Brother MFC-9340CDW printer/scanner/fax. The printer was still working fine, but I couldn’t scan.&lt;/p&gt;

&lt;p&gt;The tl;dr is to remove the old configuration and set the new one:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo brsaneconfig4 -r MFC-9340CDW
sudo brsaneconfig4 -a name=MFC-9340CDW model=MFC-9340CDW ip=192.168.0.124
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I got the new IP address from poking buttons on the front panel of the printer. The name of the device may be different, but the above is what I had from the default setup. &lt;code class=&quot;highlighter-rouge&quot;&gt;brsaneconfig4 -q&lt;/code&gt; gives all the devices supported, and also the last line is the current configuration. That’s useful to see what the currently configured IP address is, according to the software on the computer.&lt;/p&gt;

&lt;p&gt;To figure out what was wrong with &lt;code class=&quot;highlighter-rouge&quot;&gt;simple-scan&lt;/code&gt;, I did this in a terminal to see debugging output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;simple-scan -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Another useful command is:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brsaneconfig4 -p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which runs &lt;code class=&quot;highlighter-rouge&quot;&gt;ping&lt;/code&gt; on the scanner. However, in my case another device had the scanner’s old IP address, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;ping&lt;/code&gt; appeared to be working fine.&lt;/p&gt;</content><author><name>Larry Reid</name></author><summary type="html">We had a power outage this week. Some devices on my home network got new IP addresses when the power came back on. One of the devices that got a new IP address was my Brother MFC-9340CDW printer/scanner/fax. The printer was still working fine, but I couldn’t scan.</summary></entry><entry><title type="html">Disabling Warnings and Autocorrect in Rubocop</title><link href="http://0.0.0.0:4000/2016/11/18/disabling-warnings-and-autocorrect-in.html" rel="alternate" type="text/html" title="Disabling Warnings and Autocorrect in Rubocop" /><published>2016-11-18T14:53:00+00:00</published><updated>2016-11-18T14:53:00+00:00</updated><id>http://0.0.0.0:4000/2016/11/18/disabling-warnings-and-autocorrect-in</id><content type="html" xml:base="http://0.0.0.0:4000/2016/11/18/disabling-warnings-and-autocorrect-in.html">&lt;p&gt;I finally found how to disable Rubocop messages and auto-correction on a file or individual line basis.&lt;/p&gt;

&lt;p&gt;I have Atom set up to run Rubocop and auto-correct my files on save. Most of the time this is very handy. I especially like how most of the time it indents my code to the standard. But I was struggling to debug some test cases, and I wanted to use Capybara’s  &lt;code class=&quot;highlighter-rouge&quot;&gt;save_and_open_page&lt;/code&gt; to see what Capybara was actually looking at. When I saved the file, Rubocop and Atom helpfully deleted the line before I could even run the test case.&lt;/p&gt;

&lt;p&gt;But then I discovered this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;save_and_open_page # rubocop:disable Lint/Debugger
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Problem solved.&lt;/p&gt;

&lt;p&gt;Since the &lt;code class=&quot;highlighter-rouge&quot;&gt;Lint/Debugger&lt;/code&gt; cop is arguably not applicable to your test files, I sometimes put this at the top of a test file:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# rubocop:disable Lint/Debugger
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the above case, I could turn Rubocop back on if I needed it with:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# rubocop:enable Lint/Debugger
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is described in the manual at &lt;a href=&quot;http://rubocop.readthedocs.io/en/latest/configuration/#disabling-cops-within-source-code&quot;&gt;http://rubocop.readthedocs.io/en/latest/configuration/#disabling-cops-within-source-code&lt;/a&gt;, but I had trouble finding that section with Google.&lt;/p&gt;</content><author><name>Larry Reid</name></author><summary type="html">I finally found how to disable Rubocop messages and auto-correction on a file or individual line basis.</summary></entry><entry><title type="html">Enterprise Challenges to Continuous Delivery</title><link href="http://0.0.0.0:4000/2016/08/29/enterprise-challenges-to-continuous.html" rel="alternate" type="text/html" title="Enterprise Challenges to Continuous Delivery" /><published>2016-08-29T04:47:00+00:00</published><updated>2016-08-29T04:47:00+00:00</updated><id>http://0.0.0.0:4000/2016/08/29/enterprise-challenges-to-continuous</id><content type="html" xml:base="http://0.0.0.0:4000/2016/08/29/enterprise-challenges-to-continuous.html">&lt;p&gt;On one of my recent projects I noticed a challenge to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;continuous delivery&lt;/a&gt; (CD) approach in the enterprise that I haven’t seen mentioned: Software that requires a paid license.&lt;/p&gt;

&lt;p&gt;Most CD approaches are based on easily creating instances of a virtual machine. Software with a paid license often has mechanisms, like the MAC address of the first network interface has to be registered with the software vendor’s license server, to prevent automatically creating multiple instances of a virtual machine. Or it may have a license compliance tool that will get very confused by instances of virtual machines appearing and disappearing rapidly.&lt;/p&gt;

&lt;p&gt;It’s probably not impossible to do CD with your paid software. Obviously, the easiest way to deal with the problem is to use software that’s completely free to use. If you can’t do that, you’ll need to understand how the license restrictions work, and then tailor the continuous deployment approach around those restrictions. Not easy, but probably doable.&lt;/p&gt;</content><author><name>Larry Reid</name></author><summary type="html">On one of my recent projects I noticed a challenge to a continuous delivery (CD) approach in the enterprise that I haven’t seen mentioned: Software that requires a paid license.</summary></entry><entry><title type="html">Configuring Applications</title><link href="http://0.0.0.0:4000/2016/08/29/configuring-applications.html" rel="alternate" type="text/html" title="Configuring Applications" /><published>2016-08-29T04:33:00+00:00</published><updated>2016-08-29T04:33:00+00:00</updated><id>http://0.0.0.0:4000/2016/08/29/configuring-applications</id><content type="html" xml:base="http://0.0.0.0:4000/2016/08/29/configuring-applications.html">&lt;p&gt;I once had experience with a browser-based application that would show pages that were links to another application. Since the URL of the other application would change depending on the environment (development, test, staging, production, etc.), the developers decided to put the URL in a field in a row in a configuration table in the database.&lt;/p&gt;

&lt;p&gt;So far, so good. Per-environment configuration needs to be changeable. But it turned out that putting configuration in the database had some challenges. Configuration in the database is less convenient to put under revision control and to deploy with automated tools. So we didn’t have the configuration as part of an automated build tool, and it was a bureaucratic nightmare each time we had to change the URL. (Simple files are easier to integrate with revision control and automated deployment tools.)&lt;/p&gt;

&lt;p&gt;But what really caused problems was that the database contained more than just the protocol, host, domain, and port – the stuff that would change for each environment. It included a template for query parameters as well. So the line in the configuration table looked something like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://otherapplication.example.com:20400/search-page?parm1=%1,parm2=%2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The application would take the query string (&lt;code class=&quot;highlighter-rouge&quot;&gt;?parm1=%1,parm2=%2&lt;/code&gt;), and fill in the placeholders (&lt;code class=&quot;highlighter-rouge&quot;&gt;%1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;%2&lt;/code&gt;) with values. The problem was, every time the requirements expanded and we needed more parameters, the configuration string had to change &lt;em&gt;for every environment.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The parameters weren’t part of the environment set-up, so they never should have been put in the configuration table. When you’re parametrizing an application configuration, make sure you put &lt;em&gt;only&lt;/em&gt; things that change per environment into the environment configuration parameters.&lt;/p&gt;

&lt;p&gt;Unrelated to the above point, but important to note, is that we also found it very inconvenient that the placeholder marker in the URL was a percent sign. Percent signs are &lt;a href=&quot;https://en.wikipedia.org/wiki/Percent-encoding&quot;&gt;URL-encodeable&lt;/a&gt;. When we had to e-mail each other with updates to the URL, we were constantly tripped up by our e-mail and spreadsheet programs “helpfully” URL-encoding the query parameters for us, turning &lt;code class=&quot;highlighter-rouge&quot;&gt;%1&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;%251&lt;/code&gt;, for example.&lt;/p&gt;</content><author><name>Larry Reid</name></author><summary type="html">I once had experience with a browser-based application that would show pages that were links to another application. Since the URL of the other application would change depending on the environment (development, test, staging, production, etc.), the developers decided to put the URL in a field in a row in a configuration table in the database.</summary></entry><entry><title type="html">Citrix in a Window on Linux</title><link href="http://0.0.0.0:4000/2016/07/19/citrix-in-window-on-linux.html" rel="alternate" type="text/html" title="Citrix in a Window on Linux" /><published>2016-07-19T13:40:00+00:00</published><updated>2016-07-19T13:40:00+00:00</updated><id>http://0.0.0.0:4000/2016/07/19/citrix-in-window-on-linux</id><content type="html" xml:base="http://0.0.0.0:4000/2016/07/19/citrix-in-window-on-linux.html">&lt;p&gt;[Edit: This was not the solution. It worked the first time, but now it isn’t working again.]&lt;/p&gt;

&lt;p&gt;I was using Citrix Receiver quite successfully on Ubuntu 16.04 and Linux Mint 13 to remotely access my customer’s network, but I couldn’t make it start in a window. It was coming up in full screen mode. I could minimize the whole Citrix session by doing Ctrl-F2 (to tell Receiver to pass the next key to Linux), then Ctrl-Super-downarrow (Super is the “Windows” key). However, I wanted to be able to watch the Citrix session on one monitor, while I worked on other stuff on the other monitor.&lt;/p&gt;

&lt;p&gt;I finally found this blog that told me how to set up the Receiver config files to get Receiver to start in a window: &lt;a href=&quot;http://blog.eek-a-geek.info/2014/10/citrix-receiver-for-linux-131-on-64-bit.html&quot;&gt;http://blog.eek-a-geek.info/2014/10/citrix-receiver-for-linux-131-on-64-bit.html&lt;/a&gt;. What it says is:&lt;/p&gt;

&lt;p&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ICAClient/All_Regions.ini&lt;/code&gt;, replacing the line &lt;code class=&quot;highlighter-rouge&quot;&gt;TWIMode=*&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;TWIMode=Off&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ICAClient/wfclient.ini&lt;/code&gt;, adding a line &lt;code class=&quot;highlighter-rouge&quot;&gt;TWIMode=off&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;[WFClient]&lt;/code&gt; section, and adding a line &lt;code class=&quot;highlighter-rouge&quot;&gt;UseFullScreen=True&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;[Thinwire3.0]&lt;/code&gt; section.&lt;/p&gt;</content><author><name>Larry Reid</name></author><category term="Citrix" /><summary type="html">[Edit: This was not the solution. It worked the first time, but now it isn’t working again.]</summary></entry><entry><title type="html">WebEx on Ubuntu 16.04</title><link href="http://0.0.0.0:4000/2016/05/31/hello.html" rel="alternate" type="text/html" title="WebEx on Ubuntu 16.04" /><published>2016-05-31T03:59:00+00:00</published><updated>2016-05-31T03:59:00+00:00</updated><id>http://0.0.0.0:4000/2016/05/31/hello</id><content type="html" xml:base="http://0.0.0.0:4000/2016/05/31/hello.html">&lt;h2 id=&quot;java&quot;&gt;Java&lt;/h2&gt;
&lt;p&gt;You need Java installed. I used the Open JRE. Some places on the web say you need the Oracle version, but it works for me with the Open JRE and IcedTea:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;openjdk-8-jre icedtea-8-plugin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That’s all you need to get the meeting to work, but…&lt;/p&gt;
&lt;h2 id=&quot;missing-i386-libraries&quot;&gt;Missing i386 Libraries&lt;/h2&gt;
&lt;p&gt;But you won’t be able to share screens without a bunch of missing i386 libraries. The WebEx plugin is 32-bit, so you need to install some libraries that aren’t installed by default.&lt;/p&gt;

&lt;p&gt;Check to see if you’re missing libraries by going into &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.webex/&lt;/code&gt; and then into a sub-directory whose name is all digits and underscores. Once there, run:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ldd &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.so | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;not found&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\t'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;uniq&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I got about a dozen missing libraries on a relatively new install of Ubuntu 16.04. You may get different results, depending on what’s been installed on your system since you initially installed Ubuntu 16.04.&lt;/p&gt;

&lt;p&gt;I installed the following packages [updated with suggestions from readers] (fewer than a dozen, because some packages pull in multiple libraries as dependencies):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libxmu6:i386
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libgtk2.0-0:i386
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libpangox-1.0-0:i386
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libpangoxft-1.0:i386
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libxtst6:i386
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libasound2:i386
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libxv1:i386
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you check again with the above &lt;code class=&quot;highlighter-rouge&quot;&gt;ldd&lt;/code&gt; command, the only library you should still be missing is &lt;code class=&quot;highlighter-rouge&quot;&gt;libjawt.so&lt;/code&gt;. This library doesn’t seem to be needed.&lt;/p&gt;</content><author><name>Larry Reid</name></author><summary type="html">Java You need Java installed. I used the Open JRE. Some places on the web say you need the Oracle version, but it works for me with the Open JRE and IcedTea: sudo apt-get install openjdk-8-jre icedtea-8-plugin That’s all you need to get the meeting to work, but… Missing i386 Libraries But you won’t be able to share screens without a bunch of missing i386 libraries. The WebEx plugin is 32-bit, so you need to install some libraries that aren’t installed by default.</summary></entry><entry><title type="html">Android Phone Not Connecting via DHCP</title><link href="http://0.0.0.0:4000/2016/04/18/android-phone-not-connecting-via-dhcp.html" rel="alternate" type="text/html" title="Android Phone Not Connecting via DHCP" /><published>2016-04-18T03:49:00+00:00</published><updated>2016-04-18T03:49:00+00:00</updated><id>http://0.0.0.0:4000/2016/04/18/android-phone-not-connecting-via-dhcp</id><content type="html" xml:base="http://0.0.0.0:4000/2016/04/18/android-phone-not-connecting-via-dhcp.html">I had a weird problem where suddenly my phone stopped connecting to my home WiFi. I was getting the WiFi icon with the exclamation mark, meaning that the router was connecting but I wasn't getting all the info needed to participate in the network.&lt;br /&gt;&lt;br /&gt;(The solution further down doesn't require you to understand the next couple of paragraphs, so don't despair if there's too much tech talk in what follows.)&lt;br /&gt;&lt;br /&gt;Many posts on-line suggested using a static connection. I was able to do that at home, because I knew the range of DHCP addresses that my router would not give out. But I wasn't satisfied with that solution. I hate it when problems mysteriously arise, and I couldn't identify any reason why my network connection at home should have suddenly started failing.&lt;br /&gt;&lt;br /&gt;About the third time I looked for a solution, I came across this&amp;nbsp;&lt;a href=&quot;https://www.net.princeton.edu/android/android-stops-renewing-lease-keeps-using-IP-address-11236.html&quot; target=&quot;_blank&quot;&gt;document from Princeton&lt;/a&gt;. It mentions that there's a bug in some Broadcomm chips that messes up DHCP when the network stays on when the device is asleep.&lt;br /&gt;&lt;br /&gt;Well, I remember noting that I had my network configured to stay up when the device was asleep. I noticed it because I didn't think I had configured it that way. (I sometimes find my phone on the settings screen when I pull it out of my pocket, and settings are accidentally changed.)&lt;br /&gt;&lt;br /&gt;So (here's the solution), I went back to Settings-&amp;gt; WiFi, then touched the three dots near the top right of the screen, then Advanced, then I turned off &quot;Keep Wi-Fi on during sleep&quot;, which set my network to go off when the device sleeps. After that, my phone connected to my home network just fine.&lt;br /&gt;&lt;br /&gt;My phone is a Nexus 4, running Android 5.1.1, but obviously this might affect other models since it looks like it's because of the hardware.</content><author><name>Larry Reid</name></author><category term="Network" /><category term="Android" /><summary type="html">I had a weird problem where suddenly my phone stopped connecting to my home WiFi. I was getting the WiFi icon with the exclamation mark, meaning that the router was connecting but I wasn't getting all the info needed to participate in the network.(The solution further down doesn't require you to understand the next couple of paragraphs, so don't despair if there's too much tech talk in what follows.)Many posts on-line suggested using a static connection. I was able to do that at home, because I knew the range of DHCP addresses that my router would not give out. But I wasn't satisfied with that solution. I hate it when problems mysteriously arise, and I couldn't identify any reason why my network connection at home should have suddenly started failing.About the third time I looked for a solution, I came across this&amp;nbsp;document from Princeton. It mentions that there's a bug in some Broadcomm chips that messes up DHCP when the network stays on when the device is asleep.Well, I remember noting that I had my network configured to stay up when the device was asleep. I noticed it because I didn't think I had configured it that way. (I sometimes find my phone on the settings screen when I pull it out of my pocket, and settings are accidentally changed.)So (here's the solution), I went back to Settings-&amp;gt; WiFi, then touched the three dots near the top right of the screen, then Advanced, then I turned off &quot;Keep Wi-Fi on during sleep&quot;, which set my network to go off when the device sleeps. After that, my phone connected to my home network just fine.My phone is a Nexus 4, running Android 5.1.1, but obviously this might affect other models since it looks like it's because of the hardware.</summary></entry></feed>